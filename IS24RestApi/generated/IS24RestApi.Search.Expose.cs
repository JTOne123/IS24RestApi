//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 0.6.5640.32393.
namespace IS24RestApi.Search.Expose
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// <para xml:lang="de-DE">Expose</para>
    /// <para xml:lang="de-DE">Expose</para>
    /// <para xml:lang="en">Expose</para>
    /// <para xml:lang="en">Expose</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("Expose", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("expose", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class Expose
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Die Expose Informationen der Immobilie.</para>
        /// <para xml:lang="en">The expose informations of an real estate.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("realEstate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ExposeRealEstate RealEstate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Die Kontaktdaten des Anbieters.</para>
        /// <para xml:lang="en">The contact details from the realtor.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("contactDetails", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ExposeContactDetails ContactDetails { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("imprintLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ImprintLink ImprintLink { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("cancellationPolicyLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CancellationPolicyLink CancellationPolicyLink { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("realtorValuationJSONLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RealtorValuationJSONLink RealtorValuationJSONLink { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("realtorValuationV2JSONLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RealtorValuationJSONLink RealtorValuationV2JSONLink { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("realtorValuationV2JSONPLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RealtorValuationJSONPLink RealtorValuationV2JSONPLink { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">unternehmensweite Kunden-ID</para>
        /// <para xml:lang="en">Company wide customer ID</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("companyWideCustomerId", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CompanyWideCustomerId { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Definition welche Daten im Kontaktformular angezeigt werden soll.</para>
        /// <para xml:lang="en">Determines which fields are shown in the contact form.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("contactFormConfiguration", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ContactFormConfiguration ContactFormConfiguration { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bautraeger</para>
        /// <para xml:lang="en">property Developer</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("propertyDeveloper", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool PropertyDeveloperValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PropertyDeveloper-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PropertyDeveloper property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PropertyDeveloperValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bautraeger</para>
        /// <para xml:lang="en">property Developer</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> PropertyDeveloper
        {
            get
            {
                if (this.PropertyDeveloperValueSpecified)
                {
                    return this.PropertyDeveloperValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PropertyDeveloperValue = value.GetValueOrDefault();
                this.PropertyDeveloperValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("adLinkForXMLData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SimpleLink AdLinkForXMLData { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("adLinkForJSONP", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SimpleLink AdLinkForJSONP { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyAndValue> _exposeAdKeysAndValues;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("exposeAdKeysAndValues", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<KeyAndValue> ExposeAdKeysAndValues
        {
            get
            {
                return this._exposeAdKeysAndValues;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExposeAdKeysAndValues-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ExposeAdKeysAndValues collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExposeAdKeysAndValuesSpecified
        {
            get
            {
                return (this.ExposeAdKeysAndValues.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Expose" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Expose" /> class.</para>
        /// </summary>
        public Expose()
        {
            this._exposeAdKeysAndValues = new System.Collections.ObjectModel.Collection<KeyAndValue>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Link zum Element.</para>
        /// <para xml:lang="en">Link to the entity entry.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Id des Elements.</para>
        /// <para xml:lang="en">Id of entity entry.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("id", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long IdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Id-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Id property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Id des Elements.</para>
        /// <para xml:lang="en">Id of entity entry.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> Id
        {
            get
            {
                if (this.IdValueSpecified)
                {
                    return this.IdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IdValue = value.GetValueOrDefault();
                this.IdValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lesbarer Name des Elements (wenn vorhanden).</para>
        /// <para xml:lang="en">Human readable name of the entity (if it exists).</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("label", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Label { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Veränderung der Entität.</para>
        /// <para xml:lang="en">Date of the last modification of this entity.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("modification", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime ModificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Modification-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Modification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ModificationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Veränderung der Entität.</para>
        /// <para xml:lang="en">Date of the last modification of this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> Modification
        {
            get
            {
                if (this.ModificationValueSpecified)
                {
                    return this.ModificationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ModificationValue = value.GetValueOrDefault();
                this.ModificationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Veränderung der Entität.</para>
        /// <para xml:lang="en">Creationdate of this entity.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("creation", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime CreationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Creation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Creation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CreationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Veränderung der Entität.</para>
        /// <para xml:lang="en">Creationdate of this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> Creation
        {
            get
            {
                if (this.CreationValueSpecified)
                {
                    return this.CreationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CreationValue = value.GetValueOrDefault();
                this.CreationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der ersten Einstellung der Entität.</para>
        /// <para xml:lang="en">PublishDate date of this entity.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("publishDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTime PublishDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PublishDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PublishDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PublishDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der ersten Einstellung der Entität.</para>
        /// <para xml:lang="en">PublishDate date of this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> PublishDate
        {
            get
            {
                if (this.PublishDateValueSpecified)
                {
                    return this.PublishDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PublishDateValue = value.GetValueOrDefault();
                this.PublishDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Dieses Attribut liefert den ausgewaehlten Kontaktformular-Typ, der definiert, welche Felder im Kontaktformular ausgefuellt werden muessen. Kontaktmoeglichkeiten koennen EMAIL (Schnellkontakt: Nachname und E-Mail-Adresse), PHONE (Nachname und Telefonnummer) und LONG (Nachname, E-Mail-Adresse, Telefonnummer und Anschrift (inkl. Strasse, Hausnummer, PLZ und Ort)) sein.</para>
        /// <para xml:lang="en">This attribute provides the selected type of the contact form, specified all fields of them. The kinds of contacts are: EMAIL (quick contact: name and eMail) PHONE (name and phone) LONG (name, eMail, phone and address (including street, number, ZIP and city)).</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("contactFormType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ContactFormType ContactFormTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContactFormType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContactFormType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ContactFormTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Dieses Attribut liefert den ausgewaehlten Kontaktformular-Typ, der definiert, welche Felder im Kontaktformular ausgefuellt werden muessen. Kontaktmoeglichkeiten koennen EMAIL (Schnellkontakt: Nachname und E-Mail-Adresse), PHONE (Nachname und Telefonnummer) und LONG (Nachname, E-Mail-Adresse, Telefonnummer und Anschrift (inkl. Strasse, Hausnummer, PLZ und Ort)) sein.</para>
        /// <para xml:lang="en">This attribute provides the selected type of the contact form, specified all fields of them. The kinds of contacts are: EMAIL (quick contact: name and eMail) PHONE (name and phone) LONG (name, eMail, phone and address (including street, number, ZIP and city)).</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ContactFormType> ContactFormType
        {
            get
            {
                if (this.ContactFormTypeValueSpecified)
                {
                    return this.ContactFormTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContactFormTypeValue = value.GetValueOrDefault();
                this.ContactFormTypeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Allgemeine Elemente für alle Immobilienarten im Expose.
    ///      </para>
    /// <para xml:lang="en">General elements for all real estates for the expose.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ExposeRealEstate", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ApartmentBuy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ApartmentRent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AssistedLiving))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompulsoryAuction))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FlatShareRoom))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GarageBuy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GarageRent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Gastronomy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HouseBuy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HouseRent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HouseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Industry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InvestmentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LivingBuySite))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LivingRentSite))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Office))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeniorCare))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShortTermAccommodation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialPurpose))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Store))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TradeSite))]
    public partial class ExposeRealEstate : IS24RestApi.Common.AbstractRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Veröffentlichungsstatus der Immobilie.</para>
        /// <para xml:lang="en">publication state of the real estate.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("state", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateState State { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Der erste Bildanhang dieser Immobilie</para>
        /// <para xml:lang="en">The first picture attachment of this real estate
        ///              </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("titlePicture", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Picture TitlePicture { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundriss als Objektbild vorhanden</para>
        /// <para xml:lang="en">has as attachment a floorplan</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floorplan", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool FloorplanValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Floorplan-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Floorplan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorplanValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundriss als Objektbild vorhanden</para>
        /// <para xml:lang="en">has as attachment a floorplan</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Floorplan
        {
            get
            {
                if (this.FloorplanValueSpecified)
                {
                    return this.FloorplanValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorplanValue = value.GetValueOrDefault();
                this.FloorplanValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ImprintLink", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImprintLink
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Link zum Element.</para>
        /// <para xml:lang="en">Link to the entity entry.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("CancellationPolicyLink", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancellationPolicyLink
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Ein Link zur Widerrufsbelehrung des Anbieters.</para>
        /// <para xml:lang="en">A link that points to the cancellation policy of the realtor.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("realtorValuationJSONLink", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RealtorValuationJSONLink
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">URL für die Makler Bewertung mit Ausgabe in JSON Format</para>
        /// <para xml:lang="en">URL for realtor valuation service with json as response</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("realtorValuationJSONPLink", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RealtorValuationJSONPLink
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">URL für die Makler Bewertung mit Ausgabe in JSONP Format (JAVASCRIPT)</para>
        /// <para xml:lang="en">URL for realtor valuation service with jsonp as response (JAVASCRIPT)</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Definition welche Daten im Kontaktformular angezeigt werden soll.</para>
    /// <para xml:lang="en">Determines which fields are shown in the contact form.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ContactFormConfiguration", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContactFormConfiguration
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">gewuenschtes Einzugsdatum</para>
        /// <para xml:lang="en">moveInDate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("moveInDateField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType MoveInDateFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MoveInDateField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MoveInDateField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MoveInDateFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">gewuenschtes Einzugsdatum</para>
        /// <para xml:lang="en">moveInDate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> MoveInDateField
        {
            get
            {
                if (this.MoveInDateFieldValueSpecified)
                {
                    return this.MoveInDateFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MoveInDateFieldValue = value.GetValueOrDefault();
                this.MoveInDateFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Tiere im Haushalt</para>
        /// <para xml:lang="en">pets in household</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("petsInHouseholdField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType PetsInHouseholdFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PetsInHouseholdField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PetsInHouseholdField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PetsInHouseholdFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Tiere im Haushalt</para>
        /// <para xml:lang="en">pets in household</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> PetsInHouseholdField
        {
            get
            {
                if (this.PetsInHouseholdFieldValueSpecified)
                {
                    return this.PetsInHouseholdFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PetsInHouseholdFieldValue = value.GetValueOrDefault();
                this.PetsInHouseholdFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der Personen im Haushalt</para>
        /// <para xml:lang="en">number of persons</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfPersonsField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType NumberOfPersonsFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfPersonsField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfPersonsField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfPersonsFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der Personen im Haushalt</para>
        /// <para xml:lang="en">number of persons</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> NumberOfPersonsField
        {
            get
            {
                if (this.NumberOfPersonsFieldValueSpecified)
                {
                    return this.NumberOfPersonsFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfPersonsFieldValue = value.GetValueOrDefault();
                this.NumberOfPersonsFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Beschaeftigungsverhaeltnis</para>
        /// <para xml:lang="en">employment relationship</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("employmentRelationshipField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType EmploymentRelationshipFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmploymentRelationshipField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmploymentRelationshipField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmploymentRelationshipFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Beschaeftigungsverhaeltnis</para>
        /// <para xml:lang="en">employment relationship</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> EmploymentRelationshipField
        {
            get
            {
                if (this.EmploymentRelationshipFieldValueSpecified)
                {
                    return this.EmploymentRelationshipFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmploymentRelationshipFieldValue = value.GetValueOrDefault();
                this.EmploymentRelationshipFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Monatliches Nettohaushaltseinkommen</para>
        /// <para xml:lang="en">Monthly Income of household</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("incomeField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType IncomeFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die IncomeField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IncomeField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IncomeFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Monatliches Nettohaushaltseinkommen</para>
        /// <para xml:lang="en">Monthly Income of household</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> IncomeField
        {
            get
            {
                if (this.IncomeFieldValueSpecified)
                {
                    return this.IncomeFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IncomeFieldValue = value.GetValueOrDefault();
                this.IncomeFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vorname</para>
        /// <para xml:lang="en">firstname</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("firstnameField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType FirstnameFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FirstnameField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstnameField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FirstnameFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vorname</para>
        /// <para xml:lang="en">firstname</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> FirstnameField
        {
            get
            {
                if (this.FirstnameFieldValueSpecified)
                {
                    return this.FirstnameFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FirstnameFieldValue = value.GetValueOrDefault();
                this.FirstnameFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nachname</para>
        /// <para xml:lang="en">lastname</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("lastnameField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType LastnameField { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Telefonnummer</para>
        /// <para xml:lang="en">phone number</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("phoneNumberField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType PhoneNumberFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PhoneNumberField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PhoneNumberField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PhoneNumberFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Telefonnummer</para>
        /// <para xml:lang="en">phone number</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> PhoneNumberField
        {
            get
            {
                if (this.PhoneNumberFieldValueSpecified)
                {
                    return this.PhoneNumberFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PhoneNumberFieldValue = value.GetValueOrDefault();
                this.PhoneNumberFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Email Adresse</para>
        /// <para xml:lang="en">email address</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("emailAddressField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType EmailAddressFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmailAddressField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmailAddressField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmailAddressFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Email Adresse</para>
        /// <para xml:lang="en">email address</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> EmailAddressField
        {
            get
            {
                if (this.EmailAddressFieldValueSpecified)
                {
                    return this.EmailAddressFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmailAddressFieldValue = value.GetValueOrDefault();
                this.EmailAddressFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Adresse</para>
        /// <para xml:lang="en">address</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("addressField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType AddressFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AddressField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AddressField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AddressFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Adresse</para>
        /// <para xml:lang="en">address</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> AddressField
        {
            get
            {
                if (this.AddressFieldValueSpecified)
                {
                    return this.AddressFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AddressFieldValue = value.GetValueOrDefault();
                this.AddressFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Schufa Information</para>
        /// <para xml:lang="en">Schufa Information</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("schufaInformationField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType SchufaInformationFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SchufaInformationField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SchufaInformationField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SchufaInformationFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Schufa Information</para>
        /// <para xml:lang="en">Schufa Information</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> SchufaInformationField
        {
            get
            {
                if (this.SchufaInformationFieldValueSpecified)
                {
                    return this.SchufaInformationFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SchufaInformationFieldValue = value.GetValueOrDefault();
                this.SchufaInformationFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anrede</para>
        /// <para xml:lang="en">salutation</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("salutationField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType SalutationFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SalutationField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SalutationField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SalutationFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anrede</para>
        /// <para xml:lang="en">salutation</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> SalutationField
        {
            get
            {
                if (this.SalutationFieldValueSpecified)
                {
                    return this.SalutationFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalutationFieldValue = value.GetValueOrDefault();
                this.SalutationFieldValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freitext Feld</para>
        /// <para xml:lang="en">free text message</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("messageField", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MandatoryOptionalType MessageFieldValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MessageField-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MessageField property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MessageFieldValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freitext Feld</para>
        /// <para xml:lang="en">free text message</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.MandatoryOptionalType> MessageField
        {
            get
            {
                if (this.MessageFieldValueSpecified)
                {
                    return this.MessageFieldValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MessageFieldValue = value.GetValueOrDefault();
                this.MessageFieldValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("SimpleLink", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SimpleLink
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Ein Link.</para>
        /// <para xml:lang="en">A link.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace="http://www.w3.org/1999/xlink", DataType="anyURI")]
        public string Href { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("keyAndValue", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyAndValue
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("key", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Key { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("value", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Value { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("webContent", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("webContent", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class WebContent
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Angebot melden Url</para>
        /// <para xml:lang="en">fraudUrlForExpose</para>
        /// <para xml:lang="en">Maximum length: 300.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(300)]
        [System.Xml.Serialization.XmlElementAttribute("reportAFraudURL", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ReportAFraudURL { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">print view url für Expose</para>
        /// <para xml:lang="en">Print view url for expose</para>
        /// <para xml:lang="en">Maximum length: 300.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(300)]
        [System.Xml.Serialization.XmlElementAttribute("exposePrintUrl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ExposePrintUrl { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Kontakt Request zum kontaktieren eines Anbieters</para>
    /// <para xml:lang="de-DE">Kontakt Request zum kontaktieren eines Anbieters</para>
    /// <para xml:lang="en">contact form request to contact an realtor</para>
    /// <para xml:lang="en">contact form request to contact an realtor</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ContactForm", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("contactForm", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class ContactForm
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Vorname</para>
        /// <para xml:lang="en">firstname</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("firstname", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Firstname { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nachname</para>
        /// <para xml:lang="en">lastname</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("lastname", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Lastname { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Telefonnummer</para>
        /// <para xml:lang="en">phone number</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(40)]
        [System.Xml.Serialization.XmlElementAttribute("phoneNumber", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PhoneNumber { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Email Adresse</para>
        /// <para xml:lang="en">email address</para>
        /// <para xml:lang="en">Maximum length: 150.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(150)]
        [System.Xml.Serialization.XmlElementAttribute("emailAddress", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EmailAddress { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Besichtigungstermin erwünscht</para>
        /// <para xml:lang="en">appointment request</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("appointmentRequested", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType AppointmentRequestedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AppointmentRequested-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AppointmentRequested property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AppointmentRequestedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Besichtigungstermin erwünscht</para>
        /// <para xml:lang="en">appointment request</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> AppointmentRequested
        {
            get
            {
                if (this.AppointmentRequestedValueSpecified)
                {
                    return this.AppointmentRequestedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AppointmentRequestedValue = value.GetValueOrDefault();
                this.AppointmentRequestedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anmerkung</para>
        /// <para xml:lang="en">message</para>
        /// <para xml:lang="en">Maximum length: 2000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.Xml.Serialization.XmlElementAttribute("message", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Message { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Adresse</para>
        /// <para xml:lang="en">address</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("address", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Address Address { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">kundenspezifischer Style der Kontaktanfrage</para>
        /// <para xml:lang="en">customized style of contact mails</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("contactMailCustomStyle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ContactMailCustomStyle ContactMailCustomStyle { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">gewuenschtes Einzugsdatum</para>
        /// <para xml:lang="en">moveInDate</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("moveInDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MoveInDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Tiere im Haushalt</para>
        /// <para xml:lang="en">pets in household</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("petsInHousehold", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PetsInHousehold { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der Personen im Haushalt</para>
        /// <para xml:lang="en">number of persons</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfPersons", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfPersons { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Beschaeftigungsverhaeltnis</para>
        /// <para xml:lang="en">employment relationship</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("employmentRelationship", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EmploymentRelationship { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Monatliches Nettohaushaltseinkommen</para>
        /// <para xml:lang="en">Monthly Income of household</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("income", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Income { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anrede des Kontakts</para>
        /// <para xml:lang="en">Salutation of this contact</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("salutation", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SalutationType SalutationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Salutation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Salutation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SalutationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anrede des Kontakts</para>
        /// <para xml:lang="en">Salutation of this contact</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SalutationType> Salutation
        {
            get
            {
                if (this.SalutationValueSpecified)
                {
                    return this.SalutationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SalutationValue = value.GetValueOrDefault();
                this.SalutationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob der Anfragende Schufa Informationen bereit stellt.</para>
        /// <para xml:lang="en">whether the requester has any schufa information that he will provide to the realtor</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("schufaInformationProvided", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool SchufaInformationProvidedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SchufaInformationProvided-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SchufaInformationProvided property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SchufaInformationProvidedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob der Anfragende Schufa Informationen bereit stellt.</para>
        /// <para xml:lang="en">whether the requester has any schufa information that he will provide to the realtor</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> SchufaInformationProvided
        {
            get
            {
                if (this.SchufaInformationProvidedValueSpecified)
                {
                    return this.SchufaInformationProvidedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SchufaInformationProvidedValue = value.GetValueOrDefault();
                this.SchufaInformationProvidedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Der Verifikations-Code mit dessen Hilfe der Anbieter die Schufa Informationen des Anfragenden einsehen kann.</para>
        /// <para xml:lang="en">a verification code that allows the realtor to access the schufa information of the requester</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(40)]
        [System.Xml.Serialization.XmlElementAttribute("schufaVerificationCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SchufaVerificationCode { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob Profil sollte zusammen mit dem Kontakt gesendet.</para>
        /// <para xml:lang="en">whether the profile should be sent along with the contact</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("sendProfile", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool SendProfileValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SendProfile-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SendProfile property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SendProfileValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob Profil sollte zusammen mit dem Kontakt gesendet.</para>
        /// <para xml:lang="en">whether the profile should be sent along with the contact</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> SendProfile
        {
            get
            {
                if (this.SendProfileValueSpecified)
                {
                    return this.SendProfileValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SendProfileValue = value.GetValueOrDefault();
                this.SendProfileValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Profil-Bild url</para>
        /// <para xml:lang="en">Profile image url</para>
        /// <para xml:lang="en">Maximum length: 2000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.Xml.Serialization.XmlElementAttribute("profileImageUrl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProfileImageUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ein Hinweis auf die Datenschutzrichtlinien muss vor dem Absenden des Kontaktformulars angezeigt werden</para>
        /// <para xml:lang="en">privacy policy accepted</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("privacyPolicyAccepted", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool PrivacyPolicyAcceptedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrivacyPolicyAccepted-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrivacyPolicyAccepted property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PrivacyPolicyAcceptedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ein Hinweis auf die Datenschutzrichtlinien muss vor dem Absenden des Kontaktformulars angezeigt werden</para>
        /// <para xml:lang="en">privacy policy accepted</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> PrivacyPolicyAccepted
        {
            get
            {
                if (this.PrivacyPolicyAcceptedValueSpecified)
                {
                    return this.PrivacyPolicyAcceptedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PrivacyPolicyAcceptedValue = value.GetValueOrDefault();
                this.PrivacyPolicyAcceptedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Dieses Attribut liefert den ausgewaehlten Kontaktformular-Typ, der definiert, welche Felder im Kontaktformular ausgefuellt werden muessen. Kontaktmoeglichkeiten koennen EMAIL (Schnellkontakt: Nachname und E-Mail-Adresse), PHONE (Nachname und Telefonnummer) und LONG (Nachname, E-Mail-Adresse, Telefonnummer und Anschrift (inkl. Strasse, Hausnummer, PLZ und Ort)) sein.</para>
        /// <para xml:lang="en">This attribute provides the selected type of the contact form, specified all fields of them. The kinds of contacts are: EMAIL (quick contact: name and eMail) PHONE (name and phone) LONG (name, eMail, phone and address (including street, number, ZIP and city)).</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlAttributeAttribute("contactFormType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ContactFormType ContactFormTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContactFormType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContactFormType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ContactFormTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Dieses Attribut liefert den ausgewaehlten Kontaktformular-Typ, der definiert, welche Felder im Kontaktformular ausgefuellt werden muessen. Kontaktmoeglichkeiten koennen EMAIL (Schnellkontakt: Nachname und E-Mail-Adresse), PHONE (Nachname und Telefonnummer) und LONG (Nachname, E-Mail-Adresse, Telefonnummer und Anschrift (inkl. Strasse, Hausnummer, PLZ und Ort)) sein.</para>
        /// <para xml:lang="en">This attribute provides the selected type of the contact form, specified all fields of them. The kinds of contacts are: EMAIL (quick contact: name and eMail) PHONE (name and phone) LONG (name, eMail, phone and address (including street, number, ZIP and city)).</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ContactFormType> ContactFormType
        {
            get
            {
                if (this.ContactFormTypeValueSpecified)
                {
                    return this.ContactFormTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ContactFormTypeValue = value.GetValueOrDefault();
                this.ContactFormTypeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Formular zur Weiterleitung an weitere Interessierte</para>
    /// <para xml:lang="de-DE">Formular zur Weiterleitung an weitere Interessierte</para>
    /// <para xml:lang="en">form request to forward to an also interested customer</para>
    /// <para xml:lang="en">form request to forward to an also interested customer</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("SendAFriendForm", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sendAFriendForm", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class SendAFriendForm
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Name des Empfängers</para>
        /// <para xml:lang="en">name of recipient</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("recipientName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RecipientName { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Email Adresse des Empfängers</para>
        /// <para xml:lang="en">email address of recipient</para>
        /// <para xml:lang="en">Maximum length: 150.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(150)]
        [System.Xml.Serialization.XmlElementAttribute("recipientEmail", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RecipientEmail { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Name des Versenders</para>
        /// <para xml:lang="en">name of sender</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("senderName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SenderName { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Email Adresse des Versenders</para>
        /// <para xml:lang="en">email address of sender</para>
        /// <para xml:lang="en">Maximum length: 150.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(150)]
        [System.Xml.Serialization.XmlElementAttribute("senderEmail", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SenderEmail { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anmerkung</para>
        /// <para xml:lang="en">comment</para>
        /// <para xml:lang="en">Maximum length: 2000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.Xml.Serialization.XmlElementAttribute("comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Impressum vom Exposeanbieter.</para>
    /// <para xml:lang="en">Impressum/Imprint of the expose realtor.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("imprint", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class Imprint : IS24RestApi.Common.Imprint
    {
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">streaming video urls von screen9</para>
    /// <para xml:lang="en">screen9 streaming video urls</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("video", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("video", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    public partial class Video
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VideoUrlList> _videoUrlList;
        
        /// <summary>
        /// <para xml:lang="de-DE">streaming video url Liste von screen9</para>
        /// <para xml:lang="en">screen9 streaming video url list</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("videoUrlList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<VideoUrlList> VideoUrlList
        {
            get
            {
                return this._videoUrlList;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Video" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Video" /> class.</para>
        /// </summary>
        public Video()
        {
            this._videoUrlList = new System.Collections.ObjectModel.Collection<VideoUrlList>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Video Abspieldauer in ms</para>
        /// <para xml:lang="en">Video duration in ms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("duration", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long DurationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Duration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Duration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DurationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Video Abspieldauer in ms</para>
        /// <para xml:lang="en">Video duration in ms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> Duration
        {
            get
            {
                if (this.DurationValueSpecified)
                {
                    return this.DurationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DurationValue = value.GetValueOrDefault();
                this.DurationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teaser Bild für das gegebene Video</para>
        /// <para xml:lang="en">Picture teaser for this video</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("teaserUrl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string TeaserUrl { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Titel vom Video</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">Title of the video</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("title", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Title { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">eine Entität einer screen9 streaming video url mit dem video Format</para>
    /// <para xml:lang="en">screen9 single entity for one url</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("videoUrlList", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VideoUrlList
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("format", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Format { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Url { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für den Haus-Kauf Immobilientyp</para>
    /// <para xml:lang="en">Elements for the House-Buy realestate type</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("HouseBuy", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HouseBuy : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Einliegerwohnung</para>
        /// <para xml:lang="en">lodger flat</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lodgerFlat", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LodgerFlatValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LodgerFlat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LodgerFlat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LodgerFlatValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einliegerwohnung</para>
        /// <para xml:lang="en">lodger flat</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> LodgerFlat
        {
            get
            {
                if (this.LodgerFlatValueSpecified)
                {
                    return this.LodgerFlatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LodgerFlatValue = value.GetValueOrDefault();
                this.LodgerFlatValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bauphase</para>
        /// <para xml:lang="en">construction phase</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionPhase", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ConstructionPhaseType ConstructionPhaseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionPhase-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionPhase property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionPhaseValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bauphase</para>
        /// <para xml:lang="en">construction phase</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ConstructionPhaseType> ConstructionPhase
        {
            get
            {
                if (this.ConstructionPhaseValueSpecified)
                {
                    return this.ConstructionPhaseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionPhaseValue = value.GetValueOrDefault();
                this.ConstructionPhaseValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IS24RestApi.Common.BuildingType _buildingType = IS24RestApi.Common.BuildingType.NO_INFORMATION;
        
        /// <summary>
        /// <para xml:lang="de-DE">Gebäudeart</para>
        /// <para xml:lang="en">building type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("buildingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingType BuildingType
        {
            get
            {
                return this._buildingType;
            }
            set
            {
                this._buildingType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HouseBuy" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HouseBuy" /> class.</para>
        /// </summary>
        public HouseBuy()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBedRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBedRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBedRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBedRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBedRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBedRooms
        {
            get
            {
                if (this.NumberOfBedRoomsValueSpecified)
                {
                    return this.NumberOfBedRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBedRoomsValue = value.GetValueOrDefault();
                this.NumberOfBedRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBathRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBathRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBathRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBathRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBathRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBathRooms
        {
            get
            {
                if (this.NumberOfBathRoomsValueSpecified)
                {
                    return this.NumberOfBathRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBathRoomsValue = value.GetValueOrDefault();
                this.NumberOfBathRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpaceType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSpaceType ParkingSpaceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpaceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpaceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ParkingSpaceType> ParkingSpaceType
        {
            get
            {
                if (this.ParkingSpaceTypeValueSpecified)
                {
                    return this.ParkingSpaceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpaceTypeValue = value.GetValueOrDefault();
                this.ParkingSpaceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermietet</para>
        /// <para xml:lang="en">rented</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("rented", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RentedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rented-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rented property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RentedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermietet</para>
        /// <para xml:lang="en">rented</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Rented
        {
            get
            {
                if (this.RentedValueSpecified)
                {
                    return this.RentedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RentedValue = value.GetValueOrDefault();
                this.RentedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mieteinnahmen pro Monat</para>
        /// <para xml:lang="en">rental income</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("rentalIncome", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double RentalIncomeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RentalIncome-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RentalIncome property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RentalIncomeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mieteinnahmen pro Monat</para>
        /// <para xml:lang="en">rental income</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> RentalIncome
        {
            get
            {
                if (this.RentalIncomeValueSpecified)
                {
                    return this.RentalIncomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RentalIncomeValue = value.GetValueOrDefault();
                this.RentalIncomeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Als Ferienhaus geeignet</para>
        /// <para xml:lang="en">summer residence practical</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("summerResidencePractical", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType SummerResidencePracticalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SummerResidencePractical-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SummerResidencePractical property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SummerResidencePracticalValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Als Ferienhaus geeignet</para>
        /// <para xml:lang="en">summer residence practical</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> SummerResidencePractical
        {
            get
            {
                if (this.SummerResidencePracticalValueSpecified)
                {
                    return this.SummerResidencePracticalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SummerResidencePracticalValue = value.GetValueOrDefault();
                this.SummerResidencePracticalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an.
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval.
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpace { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotArea { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms of a house</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRooms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyPerformanceCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnergyPerformanceCertificateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyPerformanceCertificate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyPerformanceCertificate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyPerformanceCertificateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> EnergyPerformanceCertificate
        {
            get
            {
                if (this.EnergyPerformanceCertificateValueSpecified)
                {
                    return this.EnergyPerformanceCertificateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyPerformanceCertificateValue = value.GetValueOrDefault();
                this.EnergyPerformanceCertificateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für den Haus-Miete Immobilientyp</para>
    /// <para xml:lang="en">Elements for the House-Rent realestate type</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("HouseRent", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HouseRent : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an.
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval.
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpace { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotArea { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms of a house</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRooms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyPerformanceCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnergyPerformanceCertificateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyPerformanceCertificate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyPerformanceCertificate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyPerformanceCertificateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> EnergyPerformanceCertificate
        {
            get
            {
                if (this.EnergyPerformanceCertificateValueSpecified)
                {
                    return this.EnergyPerformanceCertificateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyPerformanceCertificateValue = value.GetValueOrDefault();
                this.EnergyPerformanceCertificateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IS24RestApi.Common.BuildingType _buildingType = IS24RestApi.Common.BuildingType.NO_INFORMATION;
        
        /// <summary>
        /// <para xml:lang="de-DE">Gebäudeart</para>
        /// <para xml:lang="en">building type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("buildingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingType BuildingType
        {
            get
            {
                return this._buildingType;
            }
            set
            {
                this._buildingType = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HouseRent" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HouseRent" /> class.</para>
        /// </summary>
        public HouseRent()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBedRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBedRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBedRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBedRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBedRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBedRooms
        {
            get
            {
                if (this.NumberOfBedRoomsValueSpecified)
                {
                    return this.NumberOfBedRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBedRoomsValue = value.GetValueOrDefault();
                this.NumberOfBedRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBathRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBathRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBathRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBathRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBathRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBathRooms
        {
            get
            {
                if (this.NumberOfBathRoomsValueSpecified)
                {
                    return this.NumberOfBathRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBathRoomsValue = value.GetValueOrDefault();
                this.NumberOfBathRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpaceType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSpaceType ParkingSpaceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpaceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpaceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ParkingSpaceType> ParkingSpaceType
        {
            get
            {
                if (this.ParkingSpaceTypeValueSpecified)
                {
                    return this.ParkingSpaceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpaceTypeValue = value.GetValueOrDefault();
                this.ParkingSpaceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaltmiete</para>
        /// <para xml:lang="en">base rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("baseRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double BaseRent { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalRentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalRent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalRent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalRentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalRent
        {
            get
            {
                if (this.TotalRentValueSpecified)
                {
                    return this.TotalRentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalRentValue = value.GetValueOrDefault();
                this.TotalRentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("serviceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ServiceCharge
        {
            get
            {
                if (this.ServiceChargeValueSpecified)
                {
                    return this.ServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceChargeValue = value.GetValueOrDefault();
                this.ServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HeatingCostsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCosts-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCosts property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HeatingCosts
        {
            get
            {
                if (this.HeatingCostsValueSpecified)
                {
                    return this.HeatingCostsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsValue = value.GetValueOrDefault();
                this.HeatingCostsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCostsInServiceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNoNotApplicableType HeatingCostsInServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCostsInServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCostsInServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsInServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNoNotApplicableType> HeatingCostsInServiceCharge
        {
            get
            {
                if (this.HeatingCostsInServiceChargeValueSpecified)
                {
                    return this.HeatingCostsInServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsInServiceChargeValue = value.GetValueOrDefault();
                this.HeatingCostsInServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PetsAllowed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PetsAllowed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PetsAllowedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.PetsAllowedType> PetsAllowed
        {
            get
            {
                if (this.PetsAllowedValueSpecified)
                {
                    return this.PetsAllowedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PetsAllowedValue = value.GetValueOrDefault();
                this.PetsAllowedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stellplatzmiete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stellplatzmiete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">"WG-geeigne</para>
        /// <para xml:lang="en">usable as flat share room</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("useAsFlatshareRoom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType UseAsFlatshareRoomValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseAsFlatshareRoom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseAsFlatshareRoom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UseAsFlatshareRoomValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">"WG-geeigne</para>
        /// <para xml:lang="en">usable as flat share room</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> UseAsFlatshareRoom
        {
            get
            {
                if (this.UseAsFlatshareRoomValueSpecified)
                {
                    return this.UseAsFlatshareRoomValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseAsFlatshareRoomValue = value.GetValueOrDefault();
                this.UseAsFlatshareRoomValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("builtInKitchen", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuiltInKitchen { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("assistedLiving", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool AssistedLiving { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für den Wohnung-Miete Immobilientyp</para>
    /// <para xml:lang="en">Elements for the Apartment-Rent realestate type</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ApartmentRent", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApartmentRent : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("apartmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ApartmentType ApartmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApartmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApartmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ApartmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ApartmentType> ApartmentType
        {
            get
            {
                if (this.ApartmentTypeValueSpecified)
                {
                    return this.ApartmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApartmentTypeValue = value.GetValueOrDefault();
                this.ApartmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage</para>
        /// <para xml:lang="en">floor</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int FloorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Floor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Floor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage</para>
        /// <para xml:lang="en">floor</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Floor
        {
            get
            {
                if (this.FloorValueSpecified)
                {
                    return this.FloorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorValue = value.GetValueOrDefault();
                this.FloorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Behindertengerecht,
        ///                        LivingInformation.handicappedAccessible ist zu verwenden
        ///                    </para>
        /// <para xml:lang="en">DEPRECATED assisted living, use
        ///                        LivingInformation.handicappedAccessible
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("assistedLiving", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool AssistedLivingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AssistedLiving-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AssistedLiving property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AssistedLivingValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Behindertengerecht,
        ///                        LivingInformation.handicappedAccessible ist zu verwenden
        ///                    </para>
        /// <para xml:lang="en">DEPRECATED assisted living, use
        ///                        LivingInformation.handicappedAccessible
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> AssistedLiving
        {
            get
            {
                if (this.AssistedLivingValueSpecified)
                {
                    return this.AssistedLivingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AssistedLivingValue = value.GetValueOrDefault();
                this.AssistedLivingValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApartmentRent" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApartmentRent" /> class.</para>
        /// </summary>
        public ApartmentRent()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBedRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBedRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBedRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBedRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBedRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBedRooms
        {
            get
            {
                if (this.NumberOfBedRoomsValueSpecified)
                {
                    return this.NumberOfBedRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBedRoomsValue = value.GetValueOrDefault();
                this.NumberOfBedRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBathRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBathRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBathRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBathRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBathRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBathRooms
        {
            get
            {
                if (this.NumberOfBathRoomsValueSpecified)
                {
                    return this.NumberOfBathRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBathRoomsValue = value.GetValueOrDefault();
                this.NumberOfBathRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpaceType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSpaceType ParkingSpaceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpaceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpaceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ParkingSpaceType> ParkingSpaceType
        {
            get
            {
                if (this.ParkingSpaceTypeValueSpecified)
                {
                    return this.ParkingSpaceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpaceTypeValue = value.GetValueOrDefault();
                this.ParkingSpaceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaltmiete</para>
        /// <para xml:lang="en">base rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("baseRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double BaseRent { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalRentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalRent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalRent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalRentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalRent
        {
            get
            {
                if (this.TotalRentValueSpecified)
                {
                    return this.TotalRentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalRentValue = value.GetValueOrDefault();
                this.TotalRentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("serviceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ServiceCharge
        {
            get
            {
                if (this.ServiceChargeValueSpecified)
                {
                    return this.ServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceChargeValue = value.GetValueOrDefault();
                this.ServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HeatingCostsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCosts-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCosts property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HeatingCosts
        {
            get
            {
                if (this.HeatingCostsValueSpecified)
                {
                    return this.HeatingCostsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsValue = value.GetValueOrDefault();
                this.HeatingCostsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCostsInServiceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNoNotApplicableType HeatingCostsInServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCostsInServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCostsInServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsInServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNoNotApplicableType> HeatingCostsInServiceCharge
        {
            get
            {
                if (this.HeatingCostsInServiceChargeValueSpecified)
                {
                    return this.HeatingCostsInServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsInServiceChargeValue = value.GetValueOrDefault();
                this.HeatingCostsInServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PetsAllowed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PetsAllowed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PetsAllowedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.PetsAllowedType> PetsAllowed
        {
            get
            {
                if (this.PetsAllowedValueSpecified)
                {
                    return this.PetsAllowedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PetsAllowedValue = value.GetValueOrDefault();
                this.PetsAllowedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stellplatzmiete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stellplatzmiete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">"WG-geeigne</para>
        /// <para xml:lang="en">usable as flat share room</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("useAsFlatshareRoom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType UseAsFlatshareRoomValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseAsFlatshareRoom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseAsFlatshareRoom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UseAsFlatshareRoomValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">"WG-geeigne</para>
        /// <para xml:lang="en">usable as flat share room</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> UseAsFlatshareRoom
        {
            get
            {
                if (this.UseAsFlatshareRoomValueSpecified)
                {
                    return this.UseAsFlatshareRoomValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UseAsFlatshareRoomValue = value.GetValueOrDefault();
                this.UseAsFlatshareRoomValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpace { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms of an apartment</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRooms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is a information about the energie index available
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyPerformanceCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnergyPerformanceCertificateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyPerformanceCertificate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyPerformanceCertificate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyPerformanceCertificateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is a information about the energie index available
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> EnergyPerformanceCertificate
        {
            get
            {
                if (this.EnergyPerformanceCertificateValueSpecified)
                {
                    return this.EnergyPerformanceCertificateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyPerformanceCertificateValue = value.GetValueOrDefault();
                this.EnergyPerformanceCertificateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">has a built-in kitchen</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("builtInKitchen", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuiltInKitchenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuiltInKitchen-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuiltInKitchen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuiltInKitchenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">has a built-in kitchen</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> BuiltInKitchen
        {
            get
            {
                if (this.BuiltInKitchenValueSpecified)
                {
                    return this.BuiltInKitchenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuiltInKitchenValue = value.GetValueOrDefault();
                this.BuiltInKitchenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balcony", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BalconyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Balcony-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balcony property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Balcony
        {
            get
            {
                if (this.BalconyValueSpecified)
                {
                    return this.BalconyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyValue = value.GetValueOrDefault();
                this.BalconyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnberechtigungsschein</para>
        /// <para xml:lang="en">needs certificate of eligibility</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("certificateOfEligibilityNeeded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool CertificateOfEligibilityNeededValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CertificateOfEligibilityNeeded-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertificateOfEligibilityNeeded property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CertificateOfEligibilityNeededValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnberechtigungsschein</para>
        /// <para xml:lang="en">needs certificate of eligibility</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> CertificateOfEligibilityNeeded
        {
            get
            {
                if (this.CertificateOfEligibilityNeededValueSpecified)
                {
                    return this.CertificateOfEligibilityNeededValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertificateOfEligibilityNeededValue = value.GetValueOrDefault();
                this.CertificateOfEligibilityNeededValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("garden", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool GardenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Garden-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Garden property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GardenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Garden
        {
            get
            {
                if (this.GardenValueSpecified)
                {
                    return this.GardenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GardenValue = value.GetValueOrDefault();
                this.GardenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für den Wohnung-Kauf Immobilientyp</para>
    /// <para xml:lang="en">Elements for the Apartment-Buy realestate type</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ApartmentBuy", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApartmentBuy : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("apartmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ApartmentType ApartmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApartmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApartmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ApartmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ApartmentType> ApartmentType
        {
            get
            {
                if (this.ApartmentTypeValueSpecified)
                {
                    return this.ApartmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApartmentTypeValue = value.GetValueOrDefault();
                this.ApartmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage</para>
        /// <para xml:lang="en">floor</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int FloorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Floor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Floor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage</para>
        /// <para xml:lang="en">floor</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Floor
        {
            get
            {
                if (this.FloorValueSpecified)
                {
                    return this.FloorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorValue = value.GetValueOrDefault();
                this.FloorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Behindertengerecht,
        ///                        LivingInformation.handicappedAccessible ist zu verwenden
        ///                    </para>
        /// <para xml:lang="en">DEPRECATED assisted living, use
        ///                        LivingInformation.handicappedAccessible
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("assistedLiving", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool AssistedLivingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AssistedLiving-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AssistedLiving property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AssistedLivingValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Behindertengerecht,
        ///                        LivingInformation.handicappedAccessible ist zu verwenden
        ///                    </para>
        /// <para xml:lang="en">DEPRECATED assisted living, use
        ///                        LivingInformation.handicappedAccessible
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> AssistedLiving
        {
            get
            {
                if (this.AssistedLivingValueSpecified)
                {
                    return this.AssistedLivingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AssistedLivingValue = value.GetValueOrDefault();
                this.AssistedLivingValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart</para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ApartmentBuy" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ApartmentBuy" /> class.</para>
        /// </summary>
        public ApartmentBuy()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">usable floor space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBedRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBedRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBedRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBedRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBedRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Schlafzimmer</para>
        /// <para xml:lang="en">number of bed rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBedRooms
        {
            get
            {
                if (this.NumberOfBedRoomsValueSpecified)
                {
                    return this.NumberOfBedRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBedRoomsValue = value.GetValueOrDefault();
                this.NumberOfBedRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBathRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBathRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBathRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBathRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBathRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBathRooms
        {
            get
            {
                if (this.NumberOfBathRoomsValueSpecified)
                {
                    return this.NumberOfBathRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBathRoomsValue = value.GetValueOrDefault();
                this.NumberOfBathRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästetoilette</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpaceType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSpaceType ParkingSpaceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpaceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpaceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ParkingSpaceType> ParkingSpaceType
        {
            get
            {
                if (this.ParkingSpaceTypeValueSpecified)
                {
                    return this.ParkingSpaceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpaceTypeValue = value.GetValueOrDefault();
                this.ParkingSpaceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermietet</para>
        /// <para xml:lang="en">rented</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("rented", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RentedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rented-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rented property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RentedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermietet</para>
        /// <para xml:lang="en">rented</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Rented
        {
            get
            {
                if (this.RentedValueSpecified)
                {
                    return this.RentedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RentedValue = value.GetValueOrDefault();
                this.RentedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mieteinnahmen pro Monat</para>
        /// <para xml:lang="en">rental income</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("rentalIncome", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double RentalIncomeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RentalIncome-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RentalIncome property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RentalIncomeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mieteinnahmen pro Monat</para>
        /// <para xml:lang="en">rental income</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> RentalIncome
        {
            get
            {
                if (this.RentalIncomeValueSpecified)
                {
                    return this.RentalIncomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RentalIncomeValue = value.GetValueOrDefault();
                this.RentalIncomeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Als Ferienhaus geeignet</para>
        /// <para xml:lang="en">summer residence practical</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("summerResidencePractical", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType SummerResidencePracticalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SummerResidencePractical-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SummerResidencePractical property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SummerResidencePracticalValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Als Ferienhaus geeignet</para>
        /// <para xml:lang="en">summer residence practical</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> SummerResidencePractical
        {
            get
            {
                if (this.SummerResidencePracticalValueSpecified)
                {
                    return this.SummerResidencePracticalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SummerResidencePracticalValue = value.GetValueOrDefault();
                this.SummerResidencePracticalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpace { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms of an apartment</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRooms { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is a information about the energie index available
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyPerformanceCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnergyPerformanceCertificateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyPerformanceCertificate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyPerformanceCertificate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyPerformanceCertificateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is a information about the energie index available
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> EnergyPerformanceCertificate
        {
            get
            {
                if (this.EnergyPerformanceCertificateValueSpecified)
                {
                    return this.EnergyPerformanceCertificateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyPerformanceCertificateValue = value.GetValueOrDefault();
                this.EnergyPerformanceCertificateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">has a built-in kitchen</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("builtInKitchen", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuiltInKitchenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuiltInKitchen-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuiltInKitchen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuiltInKitchenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">has a built-in kitchen</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> BuiltInKitchen
        {
            get
            {
                if (this.BuiltInKitchenValueSpecified)
                {
                    return this.BuiltInKitchenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuiltInKitchenValue = value.GetValueOrDefault();
                this.BuiltInKitchenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balcony", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BalconyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Balcony-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balcony property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Balcony
        {
            get
            {
                if (this.BalconyValueSpecified)
                {
                    return this.BalconyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyValue = value.GetValueOrDefault();
                this.BalconyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnberechtigungsschein</para>
        /// <para xml:lang="en">needs certificate of eligibility</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("certificateOfEligibilityNeeded", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool CertificateOfEligibilityNeededValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CertificateOfEligibilityNeeded-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CertificateOfEligibilityNeeded property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CertificateOfEligibilityNeededValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnberechtigungsschein</para>
        /// <para xml:lang="en">needs certificate of eligibility</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> CertificateOfEligibilityNeeded
        {
            get
            {
                if (this.CertificateOfEligibilityNeededValueSpecified)
                {
                    return this.CertificateOfEligibilityNeededValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CertificateOfEligibilityNeededValue = value.GetValueOrDefault();
                this.CertificateOfEligibilityNeededValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("garden", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool GardenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Garden-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Garden property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GardenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Garden
        {
            get
            {
                if (this.GardenValueSpecified)
                {
                    return this.GardenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GardenValue = value.GetValueOrDefault();
                this.GardenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hausgeld</para>
        /// <para xml:lang="en">serviceCharge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("serviceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hausgeld</para>
        /// <para xml:lang="en">serviceCharge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ServiceCharge
        {
            get
            {
                if (this.ServiceChargeValueSpecified)
                {
                    return this.ServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceChargeValue = value.GetValueOrDefault();
                this.ServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rentSubsidy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="decimal")]
        public decimal RentSubsidy { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für den Büro/Praxis Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the Office realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("Office", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Office : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Bürotyp</para>
        /// <para xml:lang="en">office type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("officeType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.OfficeType OfficeType { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IS24RestApi.Common.YesNotApplicableType _lift = IS24RestApi.Common.YesNotApplicableType.NOT_APPLICABLE;
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(IS24RestApi.Common.YesNotApplicableType.NOT_APPLICABLE)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType Lift
        {
            get
            {
                return this._lift;
            }
            set
            {
                this._lift = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("flooringType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlooringType FlooringTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlooringType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlooringType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlooringTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlooringType> FlooringType
        {
            get
            {
                if (this.FlooringTypeValueSpecified)
                {
                    return this.FlooringTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FlooringTypeValue = value.GetValueOrDefault();
                this.FlooringTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="en">deposite</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kantine/Cafeteria</para>
        /// <para xml:lang="en">canteen</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("hasCanteen", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HasCanteenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HasCanteen-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasCanteen property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HasCanteenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kantine/Cafeteria</para>
        /// <para xml:lang="en">canteen</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HasCanteen
        {
            get
            {
                if (this.HasCanteenValueSpecified)
                {
                    return this.HasCanteenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HasCanteenValue = value.GetValueOrDefault();
                this.HasCanteenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DV-Verkabelung</para>
        /// <para xml:lang="en">lan cables</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lanCables", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ItInfrastructureType LanCablesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LanCables-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LanCables property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LanCablesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DV-Verkabelung</para>
        /// <para xml:lang="en">lan cables</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ItInfrastructureType> LanCables
        {
            get
            {
                if (this.LanCablesValueSpecified)
                {
                    return this.LanCablesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LanCablesValue = value.GetValueOrDefault();
                this.LanCablesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Starkstrom</para>
        /// <para xml:lang="en">high voltage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("highVoltage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HighVoltageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HighVoltage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HighVoltage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HighVoltageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Starkstrom</para>
        /// <para xml:lang="en">high voltage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HighVoltage
        {
            get
            {
                if (this.HighVoltageValueSpecified)
                {
                    return this.HighVoltageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HighVoltageValue = value.GetValueOrDefault();
                this.HighVoltageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">kitchen complete</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("kitchenComplete", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType KitchenCompleteValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die KitchenComplete-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitchenComplete property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool KitchenCompleteValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einbauküche</para>
        /// <para xml:lang="en">kitchen complete</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> KitchenComplete
        {
            get
            {
                if (this.KitchenCompleteValueSpecified)
                {
                    return this.KitchenCompleteValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitchenCompleteValue = value.GetValueOrDefault();
                this.KitchenCompleteValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument protection</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument protection</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Klimaanlage</para>
        /// <para xml:lang="en">air condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("airConditioning", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.AirConditioningType AirConditioningValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AirConditioning-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirConditioning property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AirConditioningValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Klimaanlage</para>
        /// <para xml:lang="en">air condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.AirConditioningType> AirConditioning
        {
            get
            {
                if (this.AirConditioningValueSpecified)
                {
                    return this.AirConditioningValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AirConditioningValue = value.GetValueOrDefault();
                this.AirConditioningValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration> _officeRentDurations;
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietdauer</para>
        /// <para xml:lang="en">rent durations</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("officeRentDurations", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("officeRentDuration", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration> OfficeRentDurations
        {
            get
            {
                return this._officeRentDurations;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OfficeRentDurations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OfficeRentDurations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OfficeRentDurationsSpecified
        {
            get
            {
                return (this.OfficeRentDurations.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Office" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Office" /> class.</para>
        /// </summary>
        public Office()
        {
            this._officeRentDurations = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration>();
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aus dem vom Benutzer eingegebenen 'Preis' berechnete
        ///                        Preis-Alternativdarstellung;
        ///                        die Attribute geben die Art, die Währung und den
        ///                        Intervall an
        ///                    </para>
        /// <para xml:lang="en">alternative price representation calculated from the given 'price';
        ///                        the attributes named the type, the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("calculatedPrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price CalculatedPrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
    }
    
    /// <summary>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("OfficeOfficeRentDurations", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OfficeOfficeRentDurations
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration> _officeRentDuration;
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietdauer</para>
        /// <para xml:lang="en">rent duration</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("officeRentDuration", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration> OfficeRentDuration
        {
            get
            {
                return this._officeRentDuration;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OfficeRentDuration-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OfficeRentDuration collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OfficeRentDurationSpecified
        {
            get
            {
                return (this.OfficeRentDuration.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="OfficeOfficeRentDurations" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="OfficeOfficeRentDurations" /> class.</para>
        /// </summary>
        public OfficeOfficeRentDurations()
        {
            this._officeRentDuration = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.OfficeRentDuration>();
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für den Einzelhandel Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the store realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("Store", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Store : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Einzelhandels-Objektart</para>
        /// <para xml:lang="en">store type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("storeType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.StoreType StoreTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StoreType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StoreType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool StoreTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einzelhandels-Objektart</para>
        /// <para xml:lang="en">store type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.StoreType> StoreType
        {
            get
            {
                if (this.StoreTypeValueSpecified)
                {
                    return this.StoreTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StoreTypeValue = value.GetValueOrDefault();
                this.StoreTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lageart</para>
        /// <para xml:lang="en">location classification type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("locationClassificationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.LocationClassificationType LocationClassificationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationClassificationType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocationClassificationType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LocationClassificationTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lageart</para>
        /// <para xml:lang="en">location classification type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.LocationClassificationType> LocationClassificationType
        {
            get
            {
                if (this.LocationClassificationTypeValueSpecified)
                {
                    return this.LocationClassificationTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LocationClassificationTypeValue = value.GetValueOrDefault();
                this.LocationClassificationTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("areaDivisibleFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AreaDivisibleFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaDivisibleFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AreaDivisibleFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AreaDivisibleFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AreaDivisibleFrom
        {
            get
            {
                if (this.AreaDivisibleFromValueSpecified)
                {
                    return this.AreaDivisibleFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AreaDivisibleFromValue = value.GetValueOrDefault();
                this.AreaDivisibleFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lageart</para>
        /// <para xml:lang="en">shop window lengst</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shopWindowLength", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ShopWindowLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShopWindowLength-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShopWindowLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShopWindowLengthValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lageart</para>
        /// <para xml:lang="en">shop window lengst</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ShopWindowLength
        {
            get
            {
                if (this.ShopWindowLengthValueSpecified)
                {
                    return this.ShopWindowLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShopWindowLengthValue = value.GetValueOrDefault();
                this.ShopWindowLengthValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("goodsLift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GoodsLiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GoodsLift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GoodsLift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GoodsLiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GoodsLift
        {
            get
            {
                if (this.GoodsLiftValueSpecified)
                {
                    return this.GoodsLiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GoodsLiftValue = value.GetValueOrDefault();
                this.GoodsLiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("goodsLiftLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GoodsLiftLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GoodsLiftLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GoodsLiftLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GoodsLiftLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> GoodsLiftLoad
        {
            get
            {
                if (this.GoodsLiftLoadValueSpecified)
                {
                    return this.GoodsLiftLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GoodsLiftLoadValue = value.GetValueOrDefault();
                this.GoodsLiftLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Deckenlast</para>
        /// <para xml:lang="en">floor load</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floorLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double FloorLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FloorLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FloorLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Deckenlast</para>
        /// <para xml:lang="en">floor load</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> FloorLoad
        {
            get
            {
                if (this.FloorLoadValueSpecified)
                {
                    return this.FloorLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorLoadValue = value.GetValueOrDefault();
                this.FloorLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Rampe</para>
        /// <para xml:lang="en">ramp</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ramp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ramp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ramp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RampValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Rampe</para>
        /// <para xml:lang="en">ramp</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Ramp
        {
            get
            {
                if (this.RampValueSpecified)
                {
                    return this.RampValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RampValue = value.GetValueOrDefault();
                this.RampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zulieferungstyp</para>
        /// <para xml:lang="en">supplyType</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("supplyType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SupplyType SupplyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SupplyType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SupplyType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SupplyTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zulieferungstyp</para>
        /// <para xml:lang="en">supplyType</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SupplyType> SupplyType
        {
            get
            {
                if (this.SupplyTypeValueSpecified)
                {
                    return this.SupplyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SupplyTypeValue = value.GetValueOrDefault();
                this.SupplyTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooringType</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("flooringType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlooringType FlooringTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlooringType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlooringType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlooringTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooringType</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlooringType> FlooringType
        {
            get
            {
                if (this.FlooringTypeValueSpecified)
                {
                    return this.FlooringTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FlooringTypeValue = value.GetValueOrDefault();
                this.FlooringTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietkaution</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aus dem vom Benutzer eingegebenen 'Preis' berechnete
        ///                        Preis-Alternativdarstellung;
        ///                        die Attribute geben die Art, die Währung und den
        ///                        Intervall an
        ///                    </para>
        /// <para xml:lang="en">alternative price representation calculated from the given 'price';
        ///                        the attributes named the type, the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("calculatedPrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price CalculatedPrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Store" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Store" /> class.</para>
        /// </summary>
        public Store()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für den Gastronomie Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the gastronomy realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("Gastronomy", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Gastronomy : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Gastronomietyp</para>
        /// <para xml:lang="en">type of gastronomy</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("gastronomyType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.GastronomyType GastronomyType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gastterasse</para>
        /// <para xml:lang="en">terrace</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("terrace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType TerraceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Terrace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Terrace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TerraceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gastterasse</para>
        /// <para xml:lang="en">terrace</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Terrace
        {
            get
            {
                if (this.TerraceValueSpecified)
                {
                    return this.TerraceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TerraceValue = value.GetValueOrDefault();
                this.TerraceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Plätze Gastraum</para>
        /// <para xml:lang="en">number of seats</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberSeats", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberSeatsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberSeats-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberSeats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberSeatsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Plätze Gastraum</para>
        /// <para xml:lang="en">number of seats</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberSeats
        {
            get
            {
                if (this.NumberSeatsValueSpecified)
                {
                    return this.NumberSeatsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberSeatsValue = value.GetValueOrDefault();
                this.NumberSeatsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Betten</para>
        /// <para xml:lang="en">number of beds</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberBeds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberBedsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberBeds-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberBeds property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberBedsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Betten</para>
        /// <para xml:lang="en">number of beds</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberBeds
        {
            get
            {
                if (this.NumberBedsValueSpecified)
                {
                    return this.NumberBedsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberBedsValue = value.GetValueOrDefault();
                this.NumberBedsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietkaution</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aus dem vom Benutzer eingegebenen 'Preis' berechnete
        ///                        Preis-Alternativdarstellung;
        ///                        die Attribute geben die Art, die Währung und den
        ///                        Intervall an
        ///                    </para>
        /// <para xml:lang="en">alternative price representation calculated from the given 'price';
        ///                        the attributes named the type, the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("calculatedPrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price CalculatedPrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Gastronomy" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Gastronomy" /> class.</para>
        /// </summary>
        public Gastronomy()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für den Halle/Produktion Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the industry realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("Industry", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Industry : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Halle-/Produktion-Objektart</para>
        /// <para xml:lang="en">industry type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("industryType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.IndustryType IndustryType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("areaDivisibleFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AreaDivisibleFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaDivisibleFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AreaDivisibleFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AreaDivisibleFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AreaDivisibleFrom
        {
            get
            {
                if (this.AreaDivisibleFromValueSpecified)
                {
                    return this.AreaDivisibleFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AreaDivisibleFromValue = value.GetValueOrDefault();
                this.AreaDivisibleFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlotArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlotArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PlotAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> PlotArea
        {
            get
            {
                if (this.PlotAreaValueSpecified)
                {
                    return this.PlotAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PlotAreaValue = value.GetValueOrDefault();
                this.PlotAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hallenhoehe</para>
        /// <para xml:lang="en">hall height</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("hallHeight", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HallHeightValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HallHeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HallHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HallHeightValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hallenhoehe</para>
        /// <para xml:lang="en">hall height</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HallHeight
        {
            get
            {
                if (this.HallHeightValueSpecified)
                {
                    return this.HallHeightValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HallHeightValue = value.GetValueOrDefault();
                this.HallHeightValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("flooringType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlooringType FlooringTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlooringType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlooringType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlooringTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlooringType> FlooringType
        {
            get
            {
                if (this.FlooringTypeValueSpecified)
                {
                    return this.FlooringTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FlooringTypeValue = value.GetValueOrDefault();
                this.FlooringTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Rampe</para>
        /// <para xml:lang="en">ramp</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ramp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ramp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ramp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RampValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Rampe</para>
        /// <para xml:lang="en">ramp</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Ramp
        {
            get
            {
                if (this.RampValueSpecified)
                {
                    return this.RampValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RampValue = value.GetValueOrDefault();
                this.RampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">HebeBühne</para>
        /// <para xml:lang="en">auto lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("autoLift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType AutoLiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AutoLift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AutoLift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AutoLiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">HebeBühne</para>
        /// <para xml:lang="en">auto lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> AutoLift
        {
            get
            {
                if (this.AutoLiftValueSpecified)
                {
                    return this.AutoLiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AutoLiftValue = value.GetValueOrDefault();
                this.AutoLiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("goodsLift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GoodsLiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GoodsLift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GoodsLift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GoodsLiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzug</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GoodsLift
        {
            get
            {
                if (this.GoodsLiftValueSpecified)
                {
                    return this.GoodsLiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GoodsLiftValue = value.GetValueOrDefault();
                this.GoodsLiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzugslast</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("goodsLiftLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GoodsLiftLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GoodsLiftLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GoodsLiftLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GoodsLiftLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Lastenaufzugslast</para>
        /// <para xml:lang="en">goods lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> GoodsLiftLoad
        {
            get
            {
                if (this.GoodsLiftLoadValueSpecified)
                {
                    return this.GoodsLiftLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GoodsLiftLoadValue = value.GetValueOrDefault();
                this.GoodsLiftLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kranbahn</para>
        /// <para xml:lang="en">crane runway</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("craneRunway", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CraneRunwayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CraneRunway-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CraneRunway property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CraneRunwayValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kranbahn</para>
        /// <para xml:lang="en">crane runway</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CraneRunway
        {
            get
            {
                if (this.CraneRunwayValueSpecified)
                {
                    return this.CraneRunwayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CraneRunwayValue = value.GetValueOrDefault();
                this.CraneRunwayValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kranbahnlast</para>
        /// <para xml:lang="en">crane runway load</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("craneRunwayLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double CraneRunwayLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CraneRunwayLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CraneRunwayLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CraneRunwayLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kranbahnlast</para>
        /// <para xml:lang="en">crane runway load</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> CraneRunwayLoad
        {
            get
            {
                if (this.CraneRunwayLoadValueSpecified)
                {
                    return this.CraneRunwayLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CraneRunwayLoadValue = value.GetValueOrDefault();
                this.CraneRunwayLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Deckenlast</para>
        /// <para xml:lang="en">floor load</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floorLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double FloorLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FloorLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FloorLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Deckenlast</para>
        /// <para xml:lang="en">floor load</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> FloorLoad
        {
            get
            {
                if (this.FloorLoadValueSpecified)
                {
                    return this.FloorLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorLoadValue = value.GetValueOrDefault();
                this.FloorLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stromanschlusswert</para>
        /// <para xml:lang="en">connected load</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("connectedLoad", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConnectedLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConnectedLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConnectedLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConnectedLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Stromanschlusswert</para>
        /// <para xml:lang="en">connected load</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConnectedLoad
        {
            get
            {
                if (this.ConnectedLoadValueSpecified)
                {
                    return this.ConnectedLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConnectedLoadValue = value.GetValueOrDefault();
                this.ConnectedLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietkaution</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aus dem vom Benutzer eingegebenen 'Preis' berechnete
        ///                        Preis-Alternativdarstellung;
        ///                        die Attribute geben die Art, die Währung und den
        ///                        Intervall an
        ///                    </para>
        /// <para xml:lang="en">alternative price representation calculated from the given 'price';
        ///                        the attributes named the type, the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("calculatedPrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price CalculatedPrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Industry" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Industry" /> class.</para>
        /// </summary>
        public Industry()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften fuer den Spezialgewerbe Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the special purpose realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("SpecialPurpose", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpecialPurpose : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Spezialgewerbe-Objektart</para>
        /// <para xml:lang="en">special purpose property type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("specialPurposePropertyType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SpecialPurposeType SpecialPurposePropertyType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("areaDivisibleFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AreaDivisibleFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaDivisibleFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AreaDivisibleFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AreaDivisibleFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED use minDivisible</para>
        /// <para xml:lang="en">DEPRECATED use minDivisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AreaDivisibleFrom
        {
            get
            {
                if (this.AreaDivisibleFromValueSpecified)
                {
                    return this.AreaDivisibleFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AreaDivisibleFromValue = value.GetValueOrDefault();
                this.AreaDivisibleFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstuecksflaeche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlotArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlotArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PlotAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstuecksflaeche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> PlotArea
        {
            get
            {
                if (this.PlotAreaValueSpecified)
                {
                    return this.PlotAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PlotAreaValue = value.GetValueOrDefault();
                this.PlotAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutz</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutz</para>
        /// <para xml:lang="en">listed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">basement</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("basement", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BasementValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Basement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Basement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BasementValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">basement</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Basement
        {
            get
            {
                if (this.BasementValueSpecified)
                {
                    return this.BasementValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BasementValue = value.GetValueOrDefault();
                this.BasementValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("flooringType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlooringType FlooringTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlooringType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlooringType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlooringTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlooringType> FlooringType
        {
            get
            {
                if (this.FlooringTypeValueSpecified)
                {
                    return this.FlooringTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FlooringTypeValue = value.GetValueOrDefault();
                this.FlooringTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mietkaution</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aus dem vom Benutzer eingegebenen 'Preis' berechnete
        ///                        Preis-Alternativdarstellung;
        ///                        die Attribute geben die Art, die Währung und den
        ///                        Intervall an
        ///                    </para>
        /// <para xml:lang="en">alternative price representation calculated from the given 'price';
        ///                        the attributes named the type, the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("calculatedPrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price CalculatedPrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">(teilbare) Nettofläche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SpecialPurpose" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SpecialPurpose" /> class.</para>
        /// </summary>
        public SpecialPurpose()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften fuer den WAZ Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the ShortTermAccommodation realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("ShortTermAccommodation", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShortTermAccommodation : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaltmiete</para>
        /// <para xml:lang="en">base rent</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("baseRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double BaseRentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BaseRent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BaseRent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BaseRentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaltmiete</para>
        /// <para xml:lang="en">base rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> BaseRent
        {
            get
            {
                if (this.BaseRentValueSpecified)
                {
                    return this.BaseRentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BaseRentValue = value.GetValueOrDefault();
                this.BaseRentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller</para>
        /// <para xml:lang="en">cellar</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Frei bis</para>
        /// <para xml:lang="en">end rental date</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("endRentalDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime EndRentalDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EndRentalDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndRentalDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EndRentalDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Frei bis</para>
        /// <para xml:lang="en">end rental date</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> EndRentalDate
        {
            get
            {
                if (this.EndRentalDateValueSpecified)
                {
                    return this.EndRentalDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EndRentalDateValue = value.GetValueOrDefault();
                this.EndRentalDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ShortTermAccommodation" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ShortTermAccommodation" /> class.</para>
        /// </summary>
        public ShortTermAccommodation()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">floor</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("floor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Floor { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschlecht</para>
        /// <para xml:lang="en">gender type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("gender", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlatMateGenderType GenderValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Gender-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gender property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GenderValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschlecht</para>
        /// <para xml:lang="en">gender type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlatMateGenderType> Gender
        {
            get
            {
                if (this.GenderValueSpecified)
                {
                    return this.GenderValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GenderValue = value.GetValueOrDefault();
                this.GenderValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gaeste-WC</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gaeste-WC</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">barrierefrei</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Moeblierung</para>
        /// <para xml:lang="en">has furniture</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("hasFurniture", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNoNotApplicableType HasFurnitureValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HasFurniture-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HasFurniture property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HasFurnitureValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Moeblierung</para>
        /// <para xml:lang="en">has furniture</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNoNotApplicableType> HasFurniture
        {
            get
            {
                if (this.HasFurnitureValueSpecified)
                {
                    return this.HasFurnitureValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HasFurnitureValue = value.GetValueOrDefault();
                this.HasFurnitureValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">maximale Personenanzahl</para>
        /// <para xml:lang="en">max number of persons</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("maxNumberOfPersons", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int MaxNumberOfPersonsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNumberOfPersons-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNumberOfPersons property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MaxNumberOfPersonsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">maximale Personenanzahl</para>
        /// <para xml:lang="en">max number of persons</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> MaxNumberOfPersons
        {
            get
            {
                if (this.MaxNumberOfPersonsValueSpecified)
                {
                    return this.MaxNumberOfPersonsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxNumberOfPersonsValue = value.GetValueOrDefault();
                this.MaxNumberOfPersonsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">maximale Mietdauer</para>
        /// <para xml:lang="en">max rental time</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("maxRentalTime", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MaxRentalTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxRentalTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxRentalTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MaxRentalTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">maximale Mietdauer</para>
        /// <para xml:lang="en">max rental time</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MaxRentalTime
        {
            get
            {
                if (this.MaxRentalTimeValueSpecified)
                {
                    return this.MaxRentalTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxRentalTimeValue = value.GetValueOrDefault();
                this.MaxRentalTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mindestmietdauer</para>
        /// <para xml:lang="en">min rental time</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minRentalTime", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinRentalTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinRentalTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinRentalTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinRentalTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mindestmietdauer</para>
        /// <para xml:lang="en">min rental time</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinRentalTime
        {
            get
            {
                if (this.MinRentalTimeValueSpecified)
                {
                    return this.MinRentalTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinRentalTimeValue = value.GetValueOrDefault();
                this.MinRentalTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl</para>
        /// <para xml:lang="en">number of floors</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Garagen/Stellplatz</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Garagen/Stellplatz</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/Stellplatz-Miete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/Stellplatz-Miete</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage-/Stellplatzart</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpaceType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSpaceType ParkingSpaceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpaceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpaceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpaceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage-/Stellplatzart</para>
        /// <para xml:lang="en">parking space type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ParkingSpaceType> ParkingSpaceType
        {
            get
            {
                if (this.ParkingSpaceTypeValueSpecified)
                {
                    return this.ParkingSpaceTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpaceTypeValue = value.GetValueOrDefault();
                this.ParkingSpaceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PetsAllowed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PetsAllowed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PetsAllowedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere</para>
        /// <para xml:lang="en">pets allowed</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.PetsAllowedType> PetsAllowed
        {
            get
            {
                if (this.PetsAllowedValueSpecified)
                {
                    return this.PetsAllowedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PetsAllowedValue = value.GetValueOrDefault();
                this.PetsAllowedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("serviceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ServiceCharge
        {
            get
            {
                if (this.ServiceChargeValueSpecified)
                {
                    return this.ServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceChargeValue = value.GetValueOrDefault();
                this.ServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Pauschalmiete, das Element "price" in BaseShortTermAccommodation ist zu benutzen</para>
        /// <para xml:lang="en">DEPRECATED total rent, use the element "price" in BaseShortTermAccommodation</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalRentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalRent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalRent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalRentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED Pauschalmiete, das Element "price" in BaseShortTermAccommodation ist zu benutzen</para>
        /// <para xml:lang="en">DEPRECATED total rent, use the element "price" in BaseShortTermAccommodation</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalRent
        {
            get
            {
                if (this.TotalRentValueSpecified)
                {
                    return this.TotalRentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalRentValue = value.GetValueOrDefault();
                this.TotalRentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pauschalmiete, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">total rent, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpace
        {
            get
            {
                if (this.LivingSpaceValueSpecified)
                {
                    return this.LivingSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceValue = value.GetValueOrDefault();
                this.LivingSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NumberOfRooms
        {
            get
            {
                if (this.NumberOfRoomsValueSpecified)
                {
                    return this.NumberOfRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRoomsValue = value.GetValueOrDefault();
                this.NumberOfRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Frühester Mietbeginn</para>
        /// <para xml:lang="en">earliest time to begin the rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("startRentalDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime StartRentalDate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balcony", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BalconyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Balcony-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balcony property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">has a balcony</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Balcony
        {
            get
            {
                if (this.BalconyValueSpecified)
                {
                    return this.BalconyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyValue = value.GetValueOrDefault();
                this.BalconyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("garden", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool GardenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Garden-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Garden property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GardenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">has a garden</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Garden
        {
            get
            {
                if (this.GardenValueSpecified)
                {
                    return this.GardenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GardenValue = value.GetValueOrDefault();
                this.GardenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Raucher oder Nichtraucher</para>
        /// <para xml:lang="en">if you cannot smoke in the rooms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("nonSmoker", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool NonSmokerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NonSmoker-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonSmoker property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NonSmokerValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Raucher oder Nichtraucher</para>
        /// <para xml:lang="en">if you cannot smoke in the rooms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> NonSmoker
        {
            get
            {
                if (this.NonSmokerValueSpecified)
                {
                    return this.NonSmokerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonSmokerValue = value.GetValueOrDefault();
                this.NonSmokerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Typ von Wohnen auf Zeit (Wohnung, Zimmer oder Haus)
        ///                    </para>
        /// <para xml:lang="en">Type of the short term accomodation (apartment, room or house)
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("shortTermAccomodationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ShortTermAccommodationType ShortTermAccomodationType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften fuer den Typenhaus Immobilientyp.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the HouseType realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("HouseType", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HouseType : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche</para>
        /// <para xml:lang="en">livingSpace</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpace { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche</para>
        /// <para xml:lang="en">total area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche</para>
        /// <para xml:lang="en">total area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalArea
        {
            get
            {
                if (this.TotalAreaValueSpecified)
                {
                    return this.TotalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalAreaValue = value.GetValueOrDefault();
                this.TotalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundfläche</para>
        /// <para xml:lang="en">base area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("baseArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double BaseAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BaseArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BaseArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BaseAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundfläche</para>
        /// <para xml:lang="en">base area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> BaseArea
        {
            get
            {
                if (this.BaseAreaValueSpecified)
                {
                    return this.BaseAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BaseAreaValue = value.GetValueOrDefault();
                this.BaseAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl</para>
        /// <para xml:lang="en">count of the rooms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NumberOfRooms
        {
            get
            {
                if (this.NumberOfRoomsValueSpecified)
                {
                    return this.NumberOfRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRoomsValue = value.GetValueOrDefault();
                this.NumberOfRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bauweise</para>
        /// <para xml:lang="en">construction method</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionMethod", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HouseTypeConstructionMethodType ConstructionMethodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionMethod-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionMethod property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionMethodValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bauweise</para>
        /// <para xml:lang="en">construction method</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HouseTypeConstructionMethodType> ConstructionMethod
        {
            get
            {
                if (this.ConstructionMethodValueSpecified)
                {
                    return this.ConstructionMethodValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionMethodValue = value.GetValueOrDefault();
                this.ConstructionMethodValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektart</para>
        /// <para xml:lang="en">object type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("buildingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HouseTypeBuildingType BuildingType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ausbaustufe</para>
        /// <para xml:lang="en">house type stage of extension</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("stageOfCompletionType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HouseTypeStageOfCompletionType StageOfCompletionTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StageOfCompletionType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StageOfCompletionType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool StageOfCompletionTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ausbaustufe</para>
        /// <para xml:lang="en">house type stage of extension</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HouseTypeStageOfCompletionType> StageOfCompletionType
        {
            get
            {
                if (this.StageOfCompletionTypeValueSpecified)
                {
                    return this.StageOfCompletionTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StageOfCompletionTypeValue = value.GetValueOrDefault();
                this.StageOfCompletionTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energiestandard</para>
        /// <para xml:lang="en">house type energy standard</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyStandardType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HouseTypeEnergyStandardType EnergyStandardTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyStandardType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyStandardType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyStandardTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energiestandard</para>
        /// <para xml:lang="en">house type energy standard</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HouseTypeEnergyStandardType> EnergyStandardType
        {
            get
            {
                if (this.EnergyStandardTypeValueSpecified)
                {
                    return this.EnergyStandardTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyStandardTypeValue = value.GetValueOrDefault();
                this.EnergyStandardTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">U-Wert (Wärmedämmwert)</para>
        /// <para xml:lang="en">U-Value (thermal connectivity)</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("uValue", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UValueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UValue-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UValue property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UValueValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">U-Wert (Wärmedämmwert)</para>
        /// <para xml:lang="en">U-Value (thermal connectivity)</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UValue
        {
            get
            {
                if (this.UValueValueSpecified)
                {
                    return this.UValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UValueValue = value.GetValueOrDefault();
                this.UValueValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Typ Informationen</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">type information note</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("typeInformationNote", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TypeInformationNote { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Modell Informationen</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">model information note</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("modelInformationNote", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ModelInformationNote { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bauleistungs Informationen</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">contruction price information note</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("contructionPriceInformationNote", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ContructionPriceInformationNote { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschoss Informationen</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">floor information note</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("floorInformationNote", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FloorInformationNote { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Dachform Informationen</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">roof information note</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("roofInformationNote", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RoofInformationNote { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für das Gewerbe-Grundstueck.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the SiteTrade realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("TradeSite", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TradeSite : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, zur Miete, zur
        ///                        Pacht etc. steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,RENT...)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseForTradeType> _recommendedUseTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">empfohlene Nutzungsarten</para>
        /// <para xml:lang="en">recommended Use Types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("recommendedUseTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("siteRecommendedUseForTradeType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseForTradeType> RecommendedUseTypes
        {
            get
            {
                return this._recommendedUseTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RecommendedUseTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RecommendedUseTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RecommendedUseTypesSpecified
        {
            get
            {
                return (this.RecommendedUseTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TradeSite" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TradeSite" /> class.</para>
        /// </summary>
        public TradeSite()
        {
            this._recommendedUseTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseForTradeType>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzung</para>
        /// <para xml:lang="en">Use</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("utilizationTradeSite", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.UtilizationTradeSite UtilizationTradeSite { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("tenancy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int TenancyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tenancy-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tenancy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TenancyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Tenancy
        {
            get
            {
                if (this.TenancyValueSpecified)
                {
                    return this.TenancyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TenancyValue = value.GetValueOrDefault();
                this.TenancyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotArea { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shortTermConstructible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ShortTermConstructibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShortTermConstructible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShortTermConstructible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShortTermConstructibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ShortTermConstructible
        {
            get
            {
                if (this.ShortTermConstructibleValueSpecified)
                {
                    return this.ShortTermConstructibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortTermConstructibleValue = value.GetValueOrDefault();
                this.ShortTermConstructibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingPermission", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuildingPermissionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingPermission-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingPermission property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingPermissionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> BuildingPermission
        {
            get
            {
                if (this.BuildingPermissionValueSpecified)
                {
                    return this.BuildingPermissionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingPermissionValue = value.GetValueOrDefault();
                this.BuildingPermissionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("demolition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DemolitionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Demolition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Demolition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DemolitionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Demolition
        {
            get
            {
                if (this.DemolitionValueSpecified)
                {
                    return this.DemolitionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DemolitionValue = value.GetValueOrDefault();
                this.DemolitionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteDevelopmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteDevelopmentType SiteDevelopmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteDevelopmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteDevelopmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteDevelopmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteDevelopmentType> SiteDevelopmentType
        {
            get
            {
                if (this.SiteDevelopmentTypeValueSpecified)
                {
                    return this.SiteDevelopmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteDevelopmentTypeValue = value.GetValueOrDefault();
                this.SiteDevelopmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteConstructibleType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteConstructibleType SiteConstructibleTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteConstructibleType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteConstructibleType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteConstructibleTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteConstructibleType> SiteConstructibleType
        {
            get
            {
                if (this.SiteConstructibleTypeValueSpecified)
                {
                    return this.SiteConstructibleTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteConstructibleTypeValue = value.GetValueOrDefault();
                this.SiteConstructibleTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("grz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GrzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Grz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Grz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GrzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Grz
        {
            get
            {
                if (this.GrzValueSpecified)
                {
                    return this.GrzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GrzValue = value.GetValueOrDefault();
                this.GrzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("gfz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GfzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Gfz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gfz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GfzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Gfz
        {
            get
            {
                if (this.GfzValueSpecified)
                {
                    return this.GfzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GfzValue = value.GetValueOrDefault();
                this.GfzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("leaseInterval", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.LeaseIntervalType LeaseIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LeaseInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LeaseIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.LeaseIntervalType> LeaseInterval
        {
            get
            {
                if (this.LeaseIntervalValueSpecified)
                {
                    return this.LeaseIntervalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseIntervalValue = value.GetValueOrDefault();
                this.LeaseIntervalValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für das Wohnen-Kauf-Grundstueck.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the LivingBuySite realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("LivingBuySite", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LivingBuySite : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, oder zur
        ///                        Erbpacht steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (BUY,LONG_LEASE)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType> _recommendedUseTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">empfohlene Nutzungsarten</para>
        /// <para xml:lang="en">recommended Use Types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("recommendedUseTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("siteRecommendedUseType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType> RecommendedUseTypes
        {
            get
            {
                return this._recommendedUseTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RecommendedUseTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RecommendedUseTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RecommendedUseTypesSpecified
        {
            get
            {
                return (this.RecommendedUseTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LivingBuySite" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LivingBuySite" /> class.</para>
        /// </summary>
        public LivingBuySite()
        {
            this._recommendedUseTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("tenancy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int TenancyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tenancy-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tenancy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TenancyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Tenancy
        {
            get
            {
                if (this.TenancyValueSpecified)
                {
                    return this.TenancyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TenancyValue = value.GetValueOrDefault();
                this.TenancyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotArea { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shortTermConstructible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ShortTermConstructibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShortTermConstructible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShortTermConstructible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShortTermConstructibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ShortTermConstructible
        {
            get
            {
                if (this.ShortTermConstructibleValueSpecified)
                {
                    return this.ShortTermConstructibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortTermConstructibleValue = value.GetValueOrDefault();
                this.ShortTermConstructibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingPermission", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuildingPermissionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingPermission-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingPermission property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingPermissionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> BuildingPermission
        {
            get
            {
                if (this.BuildingPermissionValueSpecified)
                {
                    return this.BuildingPermissionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingPermissionValue = value.GetValueOrDefault();
                this.BuildingPermissionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("demolition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DemolitionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Demolition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Demolition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DemolitionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Demolition
        {
            get
            {
                if (this.DemolitionValueSpecified)
                {
                    return this.DemolitionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DemolitionValue = value.GetValueOrDefault();
                this.DemolitionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteDevelopmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteDevelopmentType SiteDevelopmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteDevelopmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteDevelopmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteDevelopmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteDevelopmentType> SiteDevelopmentType
        {
            get
            {
                if (this.SiteDevelopmentTypeValueSpecified)
                {
                    return this.SiteDevelopmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteDevelopmentTypeValue = value.GetValueOrDefault();
                this.SiteDevelopmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteConstructibleType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteConstructibleType SiteConstructibleTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteConstructibleType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteConstructibleType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteConstructibleTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteConstructibleType> SiteConstructibleType
        {
            get
            {
                if (this.SiteConstructibleTypeValueSpecified)
                {
                    return this.SiteConstructibleTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteConstructibleTypeValue = value.GetValueOrDefault();
                this.SiteConstructibleTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("grz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GrzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Grz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Grz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GrzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Grz
        {
            get
            {
                if (this.GrzValueSpecified)
                {
                    return this.GrzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GrzValue = value.GetValueOrDefault();
                this.GrzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("gfz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GfzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Gfz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gfz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GfzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Gfz
        {
            get
            {
                if (this.GfzValueSpecified)
                {
                    return this.GfzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GfzValue = value.GetValueOrDefault();
                this.GfzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("leaseInterval", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.LeaseIntervalType LeaseIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LeaseInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LeaseIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.LeaseIntervalType> LeaseInterval
        {
            get
            {
                if (this.LeaseIntervalValueSpecified)
                {
                    return this.LeaseIntervalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseIntervalValue = value.GetValueOrDefault();
                this.LeaseIntervalValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">
    ///        Eigenschaften für das Wohnen-Miete-Grundstueck.
    ///      </para>
    /// <para xml:lang="en">
    ///        Elements for the LivingRentSite realestate type.
    ///      </para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("LivingRentSite", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LivingRentSite : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart: Gibt an, ob ein Objekt zum Kauf, oder zur
        ///                        Erbpacht steht
        ///                    </para>
        /// <para xml:lang="en">The commercialization type (RENT, LEASE)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("commercializationType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CommercializationType CommercializationType { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType> _recommendedUseTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">empfohlene Nutzungsarten</para>
        /// <para xml:lang="en">recommended Use Types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("recommendedUseTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("siteRecommendedUseType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType> RecommendedUseTypes
        {
            get
            {
                return this._recommendedUseTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RecommendedUseTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RecommendedUseTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RecommendedUseTypesSpecified
        {
            get
            {
                return (this.RecommendedUseTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="LivingRentSite" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="LivingRentSite" /> class.</para>
        /// </summary>
        public LivingRentSite()
        {
            this._recommendedUseTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.SiteRecommendedUseType>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("tenancy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int TenancyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tenancy-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tenancy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TenancyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heimfall nach</para>
        /// <para xml:lang="en">tenancy</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Tenancy
        {
            get
            {
                if (this.TenancyValueSpecified)
                {
                    return this.TenancyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TenancyValue = value.GetValueOrDefault();
                this.TenancyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotArea { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minDivisible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double MinDivisibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinDivisible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinDivisible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinDivisibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilbar ab</para>
        /// <para xml:lang="en">min divisible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> MinDivisible
        {
            get
            {
                if (this.MinDivisibleValueSpecified)
                {
                    return this.MinDivisibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinDivisibleValue = value.GetValueOrDefault();
                this.MinDivisibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shortTermConstructible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ShortTermConstructibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShortTermConstructible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShortTermConstructible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShortTermConstructibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gibt an, ob das Grundstueck kurzfristig bebaubar ist
        ///                    </para>
        /// <para xml:lang="en">Indicates whether this area is short term constructible
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ShortTermConstructible
        {
            get
            {
                if (this.ShortTermConstructibleValueSpecified)
                {
                    return this.ShortTermConstructibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShortTermConstructibleValue = value.GetValueOrDefault();
                this.ShortTermConstructibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingPermission", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BuildingPermissionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingPermission-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingPermission property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingPermissionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baugenehmigung</para>
        /// <para xml:lang="en">Indicates whether there exists a building permission for this area
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> BuildingPermission
        {
            get
            {
                if (this.BuildingPermissionValueSpecified)
                {
                    return this.BuildingPermissionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingPermissionValue = value.GetValueOrDefault();
                this.BuildingPermissionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("demolition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DemolitionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Demolition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Demolition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DemolitionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Abriss</para>
        /// <para xml:lang="en">Indicates whether demolition is planned</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> Demolition
        {
            get
            {
                if (this.DemolitionValueSpecified)
                {
                    return this.DemolitionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DemolitionValue = value.GetValueOrDefault();
                this.DemolitionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteDevelopmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteDevelopmentType SiteDevelopmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteDevelopmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteDevelopmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteDevelopmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erschliessung</para>
        /// <para xml:lang="en">site development type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteDevelopmentType> SiteDevelopmentType
        {
            get
            {
                if (this.SiteDevelopmentTypeValueSpecified)
                {
                    return this.SiteDevelopmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteDevelopmentTypeValue = value.GetValueOrDefault();
                this.SiteDevelopmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("siteConstructibleType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SiteConstructibleType SiteConstructibleTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SiteConstructibleType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SiteConstructibleType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SiteConstructibleTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bebaubar nach</para>
        /// <para xml:lang="en">site constructible type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.SiteConstructibleType> SiteConstructibleType
        {
            get
            {
                if (this.SiteConstructibleTypeValueSpecified)
                {
                    return this.SiteConstructibleTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SiteConstructibleTypeValue = value.GetValueOrDefault();
                this.SiteConstructibleTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("grz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GrzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Grz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Grz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GrzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundflaechenzahl</para>
        /// <para xml:lang="en">grz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Grz
        {
            get
            {
                if (this.GrzValueSpecified)
                {
                    return this.GrzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GrzValue = value.GetValueOrDefault();
                this.GrzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("gfz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double GfzValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Gfz-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Gfz property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GfzValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschossflaechenzahl</para>
        /// <para xml:lang="en">gfz</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> Gfz
        {
            get
            {
                if (this.GfzValueSpecified)
                {
                    return this.GfzValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GfzValue = value.GetValueOrDefault();
                this.GfzValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("leaseInterval", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.LeaseIntervalType LeaseIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LeaseInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeaseInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LeaseIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pachtdauer Intervall Type (Nur für den GET Request)
        ///                    </para>
        /// <para xml:lang="en">lease interval (only for the get request)</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.LeaseIntervalType> LeaseInterval
        {
            get
            {
                if (this.LeaseIntervalValueSpecified)
                {
                    return this.LeaseIntervalValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeaseIntervalValue = value.GetValueOrDefault();
                this.LeaseIntervalValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für das Anlage Objekt.</para>
    /// <para xml:lang="en">Elements for the investment property realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("InvestmentProperty", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvestmentProperty : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">vermietbare Fläche</para>
        /// <para xml:lang="en">area for rent</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("industrialArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double IndustrialAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die IndustrialArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IndustrialArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IndustrialAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">vermietbare Fläche</para>
        /// <para xml:lang="en">area for rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> IndustrialArea
        {
            get
            {
                if (this.IndustrialAreaValueSpecified)
                {
                    return this.IndustrialAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IndustrialAreaValue = value.GetValueOrDefault();
                this.IndustrialAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("plotArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PlotAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlotArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlotArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PlotAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundstücksfläche</para>
        /// <para xml:lang="en">the area of the site</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> PlotArea
        {
            get
            {
                if (this.PlotAreaValueSpecified)
                {
                    return this.PlotAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PlotAreaValue = value.GetValueOrDefault();
                this.PlotAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtflaeche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("netFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NetFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NetFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtflaeche</para>
        /// <para xml:lang="en">the net floor space of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NetFloorSpace
        {
            get
            {
                if (this.NetFloorSpaceValueSpecified)
                {
                    return this.NetFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NetFloorSpaceValue = value.GetValueOrDefault();
                this.NetFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Arten von Anlageimmobilien-Objekte wie z.B. Einfamilienhäuser,
        ///                        Lager oder Wohnanlagen
        ///                    </para>
        /// <para xml:lang="en">Type for investment objects, like single family houses, storages
        ///                        or housing estates
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("investmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InvestmentType InvestmentType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyPerformanceCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnergyPerformanceCertificateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyPerformanceCertificate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyPerformanceCertificate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyPerformanceCertificateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ist eine Information über eine Energiekennzahl vorhanden
        ///                    </para>
        /// <para xml:lang="en">is an energy index available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> EnergyPerformanceCertificate
        {
            get
            {
                if (this.EnergyPerformanceCertificateValueSpecified)
                {
                    return this.EnergyPerformanceCertificateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyPerformanceCertificateValue = value.GetValueOrDefault();
                this.EnergyPerformanceCertificateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche der Immobilie</para>
        /// <para xml:lang="en">total area of the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalFloorSpace
        {
            get
            {
                if (this.TotalFloorSpaceValueSpecified)
                {
                    return this.TotalFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalFloorSpaceValue = value.GetValueOrDefault();
                this.TotalFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche der Immobilie</para>
        /// <para xml:lang="en">living space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche der Immobilie</para>
        /// <para xml:lang="en">living space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpace
        {
            get
            {
                if (this.LivingSpaceValueSpecified)
                {
                    return this.LivingSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceValue = value.GetValueOrDefault();
                this.LivingSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis pro Quadratmeter (Nutzerangabe)</para>
        /// <para xml:lang="en">price per sqm (user defined)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pricePerSQM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price PricePerSQM { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaufpreis geteilt durch Mieteinnahmen pro Jahr</para>
        /// <para xml:lang="en">purchase price divided by rent per year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("priceMultiplier", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double PriceMultiplierValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PriceMultiplier-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PriceMultiplier property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PriceMultiplierValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaufpreis geteilt durch Mieteinnahmen pro Jahr</para>
        /// <para xml:lang="en">purchase price divided by rent per year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> PriceMultiplier
        {
            get
            {
                if (this.PriceMultiplierValueSpecified)
                {
                    return this.PriceMultiplierValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PriceMultiplierValue = value.GetValueOrDefault();
                this.PriceMultiplierValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mieteinahmen aktuell.</para>
        /// <para xml:lang="en">current rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rentalIncomeActual", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price RentalIncomeActual { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mögliche Mieteinahmen.</para>
        /// <para xml:lang="en">possible rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rentalIncomeTarget", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price RentalIncomeTarget { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nicht umlegbare Kosten.</para>
        /// <para xml:lang="en">not reversible costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("otherCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price OtherCosts { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("listed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ListedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Listed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Listed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ListedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Denkmalschutzobjekt</para>
        /// <para xml:lang="en">monument</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Listed
        {
            get
            {
                if (this.ListedValueSpecified)
                {
                    return this.ListedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ListedValue = value.GetValueOrDefault();
                this.ListedValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private IS24RestApi.Common.YesNotApplicableType _lift = IS24RestApi.Common.YesNotApplicableType.NOT_APPLICABLE;
        
        /// <summary>
        /// <para xml:lang="de-DE">Personenaufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(IS24RestApi.Common.YesNotApplicableType.NOT_APPLICABLE)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType Lift
        {
            get
            {
                return this._lift;
            }
            set
            {
                this._lift = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToMRS", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToMRSValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToMRS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToMRS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToMRSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Hauptbahnhof in Minuten.</para>
        /// <para xml:lang="en">Travel distance to main railway station in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToMRS
        {
            get
            {
                if (this.DistanceToMRSValueSpecified)
                {
                    return this.DistanceToMRSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToMRSValue = value.GetValueOrDefault();
                this.DistanceToMRSValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToFM", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToFMValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToFM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToFM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToFMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zur Autobahn in Minuten.</para>
        /// <para xml:lang="en">Travel distance to federal motorway in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToFM
        {
            get
            {
                if (this.DistanceToFMValueSpecified)
                {
                    return this.DistanceToFMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToFMValue = value.GetValueOrDefault();
                this.DistanceToFMValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToPT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToPTValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToPT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToPT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToPTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Laufweg zu öffentlichen Verkehrsmittel in Minuten.</para>
        /// <para xml:lang="en">Walking distance to public transport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToPT
        {
            get
            {
                if (this.DistanceToPTValueSpecified)
                {
                    return this.DistanceToPTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToPTValue = value.GetValueOrDefault();
                this.DistanceToPTValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("distanceToAirport", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int DistanceToAirportValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DistanceToAirport-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DistanceToAirport property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DistanceToAirportValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fahrweg zum Flughafen in Minuten.</para>
        /// <para xml:lang="en">Travel distance to airport in minutes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> DistanceToAirport
        {
            get
            {
                if (this.DistanceToAirportValueSpecified)
                {
                    return this.DistanceToAirportValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DistanceToAirportValue = value.GetValueOrDefault();
                this.DistanceToAirportValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfParkingSpaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfParkingSpacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfParkingSpaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfParkingSpaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfParkingSpacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parkflächenanzahl</para>
        /// <para xml:lang="en">number of parking spaces</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfParkingSpaces
        {
            get
            {
                if (this.NumberOfParkingSpacesValueSpecified)
                {
                    return this.NumberOfParkingSpacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfParkingSpacesValue = value.GetValueOrDefault();
                this.NumberOfParkingSpacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingSpacePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ParkingSpacePriceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingSpacePrice-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingSpacePrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingSpacePriceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz-Kaufpreis</para>
        /// <para xml:lang="en">parking space price</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ParkingSpacePrice
        {
            get
            {
                if (this.ParkingSpacePriceValueSpecified)
                {
                    return this.ParkingSpacePriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingSpacePriceValue = value.GetValueOrDefault();
                this.ParkingSpacePriceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interiorQuality", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InteriorQuality InteriorQualityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InteriorQuality-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InteriorQuality property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InteriorQualityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Qualität der Ausstattung</para>
        /// <para xml:lang="en">interior quality</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.InteriorQuality> InteriorQuality
        {
            get
            {
                if (this.InteriorQualityValueSpecified)
                {
                    return this.InteriorQualityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InteriorQualityValue = value.GetValueOrDefault();
                this.InteriorQualityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bezugsfrei ab</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">free from</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FreeFrom { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> _firingTypes;
        
        /// <summary>
        /// <para xml:lang="de-DE">Befeuerungsarten</para>
        /// <para xml:lang="en">firing types</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("firingTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("firingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType> FiringTypes
        {
            get
            {
                return this._firingTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiringTypes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiringTypes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiringTypesSpecified
        {
            get
            {
                return (this.FiringTypes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="InvestmentProperty" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="InvestmentProperty" /> class.</para>
        /// </summary>
        public InvestmentProperty()
        {
            this._firingTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.FiringType>();
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("additionalArea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double AdditionalAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalArea property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenfläche</para>
        /// <para xml:lang="en">additional area</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> AdditionalArea
        {
            get
            {
                if (this.AdditionalAreaValueSpecified)
                {
                    return this.AdditionalAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalAreaValue = value.GetValueOrDefault();
                this.AdditionalAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etagenzahl (Dieser Wert ist ein String und flexibel (Etagenanzahl
        ///                        oder Etage))
        ///                    </para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">number of floor (this value is a string and flexible (number of
        ///                        floors or floors))
        ///                    </para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFloors { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">additional costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("additionalCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price AdditionalCosts { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für das Garagen zur Miete Objekt.</para>
    /// <para xml:lang="en">Elements for the garages to rent realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("GarageRent", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GarageRent : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">area, you can use from this real estate typ</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">area, you can use from this real estate typ</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar ab</para>
        /// <para xml:lang="en">free from</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime FreeFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FreeFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FreeFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FreeFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar ab</para>
        /// <para xml:lang="en">free from</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> FreeFrom
        {
            get
            {
                if (this.FreeFromValueSpecified)
                {
                    return this.FreeFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FreeFromValue = value.GetValueOrDefault();
                this.FreeFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar bis</para>
        /// <para xml:lang="en">free until</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("freeUntil", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime FreeUntilValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FreeUntil-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FreeUntil property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FreeUntilValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar bis</para>
        /// <para xml:lang="en">free until</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> FreeUntil
        {
            get
            {
                if (this.FreeUntilValueSpecified)
                {
                    return this.FreeUntilValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FreeUntilValue = value.GetValueOrDefault();
                this.FreeUntilValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagentyp</para>
        /// <para xml:lang="en">The garage type (BUY,LONG_LEASE)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("garageType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.GarageType GarageType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenlänge</para>
        /// <para xml:lang="en">length of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lengthGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LengthGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LengthGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LengthGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LengthGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenlänge</para>
        /// <para xml:lang="en">length of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LengthGarage
        {
            get
            {
                if (this.LengthGarageValueSpecified)
                {
                    return this.LengthGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LengthGarageValue = value.GetValueOrDefault();
                this.LengthGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenbreite</para>
        /// <para xml:lang="en">width of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("widthGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double WidthGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WidthGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WidthGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WidthGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenbreite</para>
        /// <para xml:lang="en">width of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> WidthGarage
        {
            get
            {
                if (this.WidthGarageValueSpecified)
                {
                    return this.WidthGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WidthGarageValue = value.GetValueOrDefault();
                this.WidthGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenhöhe</para>
        /// <para xml:lang="en">height of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heightGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HeightGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeightGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeightGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeightGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenhöhe</para>
        /// <para xml:lang="en">height of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HeightGarage
        {
            get
            {
                if (this.HeightGarageValueSpecified)
                {
                    return this.HeightGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeightGarageValue = value.GetValueOrDefault();
                this.HeightGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für das Garagen zum Kauf Objekt.</para>
    /// <para xml:lang="en">Elements for the garages to buy realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("GarageBuy", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GarageBuy : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis, die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price, the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">area, you can use from this real estate typ</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("usableFloorSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double UsableFloorSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UsableFloorSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UsableFloorSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool UsableFloorSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nutzfläche</para>
        /// <para xml:lang="en">area, you can use from this real estate typ</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> UsableFloorSpace
        {
            get
            {
                if (this.UsableFloorSpaceValueSpecified)
                {
                    return this.UsableFloorSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.UsableFloorSpaceValue = value.GetValueOrDefault();
                this.UsableFloorSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagentyp</para>
        /// <para xml:lang="en">The garage type (BUY,LONG_LEASE)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("garageType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.GarageType GarageType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenlänge</para>
        /// <para xml:lang="en">length of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lengthGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LengthGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LengthGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LengthGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LengthGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenlänge</para>
        /// <para xml:lang="en">length of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LengthGarage
        {
            get
            {
                if (this.LengthGarageValueSpecified)
                {
                    return this.LengthGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LengthGarageValue = value.GetValueOrDefault();
                this.LengthGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenbreite</para>
        /// <para xml:lang="en">width of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("widthGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double WidthGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WidthGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WidthGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WidthGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenbreite</para>
        /// <para xml:lang="en">width of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> WidthGarage
        {
            get
            {
                if (this.WidthGarageValueSpecified)
                {
                    return this.WidthGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WidthGarageValue = value.GetValueOrDefault();
                this.WidthGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenhöhe</para>
        /// <para xml:lang="en">height of the garage</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heightGarage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HeightGarageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeightGarage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeightGarage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeightGarageValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garagenhöhe</para>
        /// <para xml:lang="en">height of the garage</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HeightGarage
        {
            get
            {
                if (this.HeightGarageValueSpecified)
                {
                    return this.HeightGarageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeightGarageValue = value.GetValueOrDefault();
                this.HeightGarageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("condition", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RealEstateCondition ConditionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Condition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConditionValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektzustand</para>
        /// <para xml:lang="en">condition</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RealEstateCondition> Condition
        {
            get
            {
                if (this.ConditionValueSpecified)
                {
                    return this.ConditionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConditionValue = value.GetValueOrDefault();
                this.ConditionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastRefurbishment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int LastRefurbishmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastRefurbishment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastRefurbishment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastRefurbishmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Letzte Modernisierung</para>
        /// <para xml:lang="en">last refurbishment</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> LastRefurbishment
        {
            get
            {
                if (this.LastRefurbishmentValueSpecified)
                {
                    return this.LastRefurbishmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastRefurbishmentValue = value.GetValueOrDefault();
                this.LastRefurbishmentValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für Pflegeheim Objekte.</para>
    /// <para xml:lang="en">Elements for the senior care realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("SeniorCare", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SeniorCare : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Kurzbeschreibung</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">short report about the real estate type</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("shortDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ShortDescription { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets are allowed in the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowed { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Probewohnen</para>
        /// <para xml:lang="en">test living in the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("trialLivingPossible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType TrialLivingPossible { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.CareType> _careTypes;
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("careTypes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("careType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.CareType> CareTypes
        {
            get
            {
                return this._careTypes;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="SeniorCare" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SeniorCare" /> class.</para>
        /// </summary>
        public SeniorCare()
        {
            this._careTypes = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.CareType>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflegestufe</para>
        /// <para xml:lang="en">Care level</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("careLevel", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CareLevelExpose CareLevel { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Preis; die Attribute geben die Art, die Währung und den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Price; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("price", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price Price { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bettenanzahl</para>
        /// <para xml:lang="en">number of beds</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBeds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBedsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBeds-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBeds property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBedsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bettenanzahl</para>
        /// <para xml:lang="en">number of beds</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBeds
        {
            get
            {
                if (this.NumberOfBedsValueSpecified)
                {
                    return this.NumberOfBedsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBedsValue = value.GetValueOrDefault();
                this.NumberOfBedsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eroeffnung/Bezug</para>
        /// <para xml:lang="en">Opening</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("opening", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime OpeningValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Opening-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Opening property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OpeningValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eroeffnung/Bezug</para>
        /// <para xml:lang="en">Opening</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> Opening
        {
            get
            {
                if (this.OpeningValueSpecified)
                {
                    return this.OpeningValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OpeningValue = value.GetValueOrDefault();
                this.OpeningValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Demenz Patienten</para>
        /// <para xml:lang="en">Care of dementia patients</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfDementia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfDementiaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfDementia-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfDementia property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfDementiaValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Demenz Patienten</para>
        /// <para xml:lang="en">Care of dementia patients</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfDementia
        {
            get
            {
                if (this.CareOfDementiaValueSpecified)
                {
                    return this.CareOfDementiaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfDementiaValue = value.GetValueOrDefault();
                this.CareOfDementiaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von kuenstlicher Beatmung</para>
        /// <para xml:lang="en">Care of artificial respiration</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfArtificialRespiration", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfArtificialRespirationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfArtificialRespiration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfArtificialRespiration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfArtificialRespirationValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von kuenstlicher Beatmung</para>
        /// <para xml:lang="en">Care of artificial respiration</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfArtificialRespiration
        {
            get
            {
                if (this.CareOfArtificialRespirationValueSpecified)
                {
                    return this.CareOfArtificialRespirationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfArtificialRespirationValue = value.GetValueOrDefault();
                this.CareOfArtificialRespirationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Wachkoma</para>
        /// <para xml:lang="en">Care of coma vigil</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfComaVigil", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfComaVigilValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfComaVigil-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfComaVigil property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfComaVigilValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Wachkoma</para>
        /// <para xml:lang="en">Care of coma vigil</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfComaVigil
        {
            get
            {
                if (this.CareOfComaVigilValueSpecified)
                {
                    return this.CareOfComaVigilValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfComaVigilValue = value.GetValueOrDefault();
                this.CareOfComaVigilValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Schlaganfall</para>
        /// <para xml:lang="en">Care of stroke patients</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfStroke", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfStrokeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfStroke-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfStroke property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfStrokeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Schlaganfall</para>
        /// <para xml:lang="en">Care of stroke patients</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfStroke
        {
            get
            {
                if (this.CareOfStrokeValueSpecified)
                {
                    return this.CareOfStrokeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfStrokeValue = value.GetValueOrDefault();
                this.CareOfStrokeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Parkinson Patienten</para>
        /// <para xml:lang="en">Care of Parkinson patients</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfParkinson", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfParkinsonValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfParkinson-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfParkinson property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfParkinsonValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Parkinson Patienten</para>
        /// <para xml:lang="en">Care of Parkinson patients</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfParkinson
        {
            get
            {
                if (this.CareOfParkinsonValueSpecified)
                {
                    return this.CareOfParkinsonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfParkinsonValue = value.GetValueOrDefault();
                this.CareOfParkinsonValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Alzheimer Patienten</para>
        /// <para xml:lang="en">Care of Alzheimer patients</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfAlzheimer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfAlzheimerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfAlzheimer-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfAlzheimer property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfAlzheimerValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Alzheimer Patienten</para>
        /// <para xml:lang="en">Care of Alzheimer patients</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfAlzheimer
        {
            get
            {
                if (this.CareOfAlzheimerValueSpecified)
                {
                    return this.CareOfAlzheimerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfAlzheimerValue = value.GetValueOrDefault();
                this.CareOfAlzheimerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Multipler Sklerosis</para>
        /// <para xml:lang="en">Care of Multiple Sclerosis</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("careOfMultipleSclerosis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CareOfMultipleSclerosisValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CareOfMultipleSclerosis-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CareOfMultipleSclerosis property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CareOfMultipleSclerosisValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Pflege von Multipler Sklerosis</para>
        /// <para xml:lang="en">Care of Multiple Sclerosis</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CareOfMultipleSclerosis
        {
            get
            {
                if (this.CareOfMultipleSclerosisValueSpecified)
                {
                    return this.CareOfMultipleSclerosisValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CareOfMultipleSclerosisValue = value.GetValueOrDefault();
                this.CareOfMultipleSclerosisValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hauseigene Küche verfügbar</para>
        /// <para xml:lang="en">Kitchen available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("kitchenAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType KitchenAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die KitchenAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the KitchenAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool KitchenAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Hauseigene Küche verfügbar</para>
        /// <para xml:lang="en">Kitchen available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> KitchenAvailable
        {
            get
            {
                if (this.KitchenAvailableValueSpecified)
                {
                    return this.KitchenAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.KitchenAvailableValue = value.GetValueOrDefault();
                this.KitchenAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("roomType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.RoomType RoomTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoomType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RoomType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RoomTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.RoomType> RoomType
        {
            get
            {
                if (this.RoomTypeValueSpecified)
                {
                    return this.RoomTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RoomTypeValue = value.GetValueOrDefault();
                this.RoomTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Therapieangebot verfügbar</para>
        /// <para xml:lang="en">Therapy offerings available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("therapyOfferingsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType TherapyOfferingsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TherapyOfferingsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TherapyOfferingsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TherapyOfferingsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Therapieangebot verfügbar</para>
        /// <para xml:lang="en">Therapy offerings available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> TherapyOfferingsAvailable
        {
            get
            {
                if (this.TherapyOfferingsAvailableValueSpecified)
                {
                    return this.TherapyOfferingsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TherapyOfferingsAvailableValue = value.GetValueOrDefault();
                this.TherapyOfferingsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("barrierFree", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BarrierFreeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BarrierFree-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BarrierFree property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BarrierFreeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BarrierFree
        {
            get
            {
                if (this.BarrierFreeValueSpecified)
                {
                    return this.BarrierFreeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BarrierFreeValue = value.GetValueOrDefault();
                this.BarrierFreeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl betreute Wohnungen</para>
        /// <para xml:lang="en">number of apartments that are looked after</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfLookedAfterApartments", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfLookedAfterApartmentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfLookedAfterApartments-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfLookedAfterApartments property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfLookedAfterApartmentsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl betreute Wohnungen</para>
        /// <para xml:lang="en">number of apartments that are looked after</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfLookedAfterApartments
        {
            get
            {
                if (this.NumberOfLookedAfterApartmentsValueSpecified)
                {
                    return this.NumberOfLookedAfterApartmentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfLookedAfterApartmentsValue = value.GetValueOrDefault();
                this.NumberOfLookedAfterApartmentsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Pflegeplätze</para>
        /// <para xml:lang="en">Number of the nursing places</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfNursingPlaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfNursingPlacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfNursingPlaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfNursingPlaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfNursingPlacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Pflegeplätze</para>
        /// <para xml:lang="en">Number of the nursing places</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfNursingPlaces
        {
            get
            {
                if (this.NumberOfNursingPlacesValueSpecified)
                {
                    return this.NumberOfNursingPlacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfNursingPlacesValue = value.GetValueOrDefault();
                this.NumberOfNursingPlacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche von</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpaceFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpaceFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpaceFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche von</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpaceFrom
        {
            get
            {
                if (this.LivingSpaceFromValueSpecified)
                {
                    return this.LivingSpaceFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceFromValue = value.GetValueOrDefault();
                this.LivingSpaceFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche bis</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpaceTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpaceTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpaceTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche bis</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpaceTo
        {
            get
            {
                if (this.LivingSpaceToValueSpecified)
                {
                    return this.LivingSpaceToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceToValue = value.GetValueOrDefault();
                this.LivingSpaceToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Behindertengerecht</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Behindertengerecht</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeappartments verfügbar</para>
        /// <para xml:lang="en">Guest apartments available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestApartmentsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestApartmentsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestApartmentsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestApartmentsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestApartmentsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeappartments verfügbar</para>
        /// <para xml:lang="en">Guest apartments available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestApartmentsAvailable
        {
            get
            {
                if (this.GuestApartmentsAvailableValueSpecified)
                {
                    return this.GuestApartmentsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestApartmentsAvailableValue = value.GetValueOrDefault();
                this.GuestApartmentsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Restaurant/ Café verfügbar</para>
        /// <para xml:lang="en">Restaurant available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("restaurantAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RestaurantAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RestaurantAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestaurantAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RestaurantAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Restaurant/ Café verfügbar</para>
        /// <para xml:lang="en">Restaurant available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> RestaurantAvailable
        {
            get
            {
                if (this.RestaurantAvailableValueSpecified)
                {
                    return this.RestaurantAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestaurantAvailableValue = value.GetValueOrDefault();
                this.RestaurantAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eigene Kochmöglichkeit</para>
        /// <para xml:lang="en">Cooking facilities available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cookingFacilitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CookingFacilitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CookingFacilitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CookingFacilitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CookingFacilitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eigene Kochmöglichkeit</para>
        /// <para xml:lang="en">Cooking facilities available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CookingFacilitiesAvailable
        {
            get
            {
                if (this.CookingFacilitiesAvailableValueSpecified)
                {
                    return this.CookingFacilitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CookingFacilitiesAvailableValue = value.GetValueOrDefault();
                this.CookingFacilitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mitnahme eigener Möbel möglich</para>
        /// <para xml:lang="en">Own furniture possible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ownFurniturePossible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType OwnFurniturePossibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OwnFurniturePossible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OwnFurniturePossible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OwnFurniturePossibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mitnahme eigener Möbel möglich</para>
        /// <para xml:lang="en">Own furniture possible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> OwnFurniturePossible
        {
            get
            {
                if (this.OwnFurniturePossibleValueSpecified)
                {
                    return this.OwnFurniturePossibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OwnFurniturePossibleValue = value.GetValueOrDefault();
                this.OwnFurniturePossibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Reinigungsservice verfügbar</para>
        /// <para xml:lang="en">Cleaning service available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cleaningServiceAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CleaningServiceAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CleaningServiceAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CleaningServiceAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CleaningServiceAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Reinigungsservice verfügbar</para>
        /// <para xml:lang="en">Cleaning service available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CleaningServiceAvailable
        {
            get
            {
                if (this.CleaningServiceAvailableValueSpecified)
                {
                    return this.CleaningServiceAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CleaningServiceAvailableValue = value.GetValueOrDefault();
                this.CleaningServiceAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einkaufsmöglichkeiten im Haus</para>
        /// <para xml:lang="en">Shopping facilities available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shoppingFacilitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ShoppingFacilitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShoppingFacilitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShoppingFacilitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShoppingFacilitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einkaufsmöglichkeiten im Haus</para>
        /// <para xml:lang="en">Shopping facilities available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ShoppingFacilitiesAvailable
        {
            get
            {
                if (this.ShoppingFacilitiesAvailableValueSpecified)
                {
                    return this.ShoppingFacilitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShoppingFacilitiesAvailableValue = value.GetValueOrDefault();
                this.ShoppingFacilitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">24 Stunden Sicherheit</para>
        /// <para xml:lang="en">security 24 hours</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("security24Hours", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType Security24HoursValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Security24Hours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Security24Hours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool Security24HoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">24 Stunden Sicherheit</para>
        /// <para xml:lang="en">security 24 hours</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Security24Hours
        {
            get
            {
                if (this.Security24HoursValueSpecified)
                {
                    return this.Security24HoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Security24HoursValue = value.GetValueOrDefault();
                this.Security24HoursValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kulturprogramm verfügbar</para>
        /// <para xml:lang="en">cultural program available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("culturalProgramAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CulturalProgramAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CulturalProgramAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CulturalProgramAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CulturalProgramAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kulturprogramm verfügbar</para>
        /// <para xml:lang="en">cultural program available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CulturalProgramAvailable
        {
            get
            {
                if (this.CulturalProgramAvailableValueSpecified)
                {
                    return this.CulturalProgramAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CulturalProgramAvailableValue = value.GetValueOrDefault();
                this.CulturalProgramAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freizeitaktivitäten verfügbar</para>
        /// <para xml:lang="en">leisureActivitiesAvailable</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("leisureActivitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LeisureActivitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LeisureActivitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeisureActivitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LeisureActivitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freizeitaktivitäten verfügbar</para>
        /// <para xml:lang="en">leisureActivitiesAvailable</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> LeisureActivitiesAvailable
        {
            get
            {
                if (this.LeisureActivitiesAvailableValueSpecified)
                {
                    return this.LeisureActivitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeisureActivitiesAvailableValue = value.GetValueOrDefault();
                this.LeisureActivitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Religiöse Angebote</para>
        /// <para xml:lang="en">Religious offerings available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("religiousOfferingsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ReligiousOfferingsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReligiousOfferingsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReligiousOfferingsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReligiousOfferingsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Religiöse Angebote</para>
        /// <para xml:lang="en">Religious offerings available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ReligiousOfferingsAvailable
        {
            get
            {
                if (this.ReligiousOfferingsAvailableValueSpecified)
                {
                    return this.ReligiousOfferingsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReligiousOfferingsAvailableValue = value.GetValueOrDefault();
                this.ReligiousOfferingsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balconyAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BalconyAvailableType BalconyAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BalconyAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalconyAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BalconyAvailableType> BalconyAvailable
        {
            get
            {
                if (this.BalconyAvailableValueSpecified)
                {
                    return this.BalconyAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyAvailableValue = value.GetValueOrDefault();
                this.BalconyAvailableValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _branchEntry = false;
        
        /// <summary>
        /// <para xml:lang="de-DE">Branchenbucheintrag</para>
        /// <para xml:lang="en">listed in yellow pages</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlElementAttribute("branchEntry", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BranchEntry
        {
            get
            {
                return this._branchEntry;
            }
            set
            {
                this._branchEntry = value;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für Seniorenwohnen Objekte.</para>
    /// <para xml:lang="en">Elements for the assisted living realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("AssistedLiving", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssistedLiving : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Kurzbeschreibung</para>
        /// <para xml:lang="de-DE">invalid characters w.r.t. XML will be filtered out on outgoing responses</para>
        /// <para xml:lang="en">short report about the real estate type</para>
        /// <para xml:lang="en">in Bezug auf XML ungültige Zeichen werden bei der Ausgabe ausgefiltert</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("shortDescription", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ShortDescription { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets are allowed in the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowed { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Probewohnen</para>
        /// <para xml:lang="en">test living in the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("trialLivingPossible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType TrialLivingPossible { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Vermarktungsart (Miete, Kauf oder Pacht)</para>
        /// <para xml:lang="en">The Type of the marketing (rent, buy or lease)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("marketingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.MarketingType MarketingType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Seniorenwohnen Typ</para>
        /// <para xml:lang="en">The Type of the facility</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("facilityType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FacilityType FacilityType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Minimaler Mietpreis; die Attribute geben die Art, die Währung und
        ///                        den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Minimal rent; the attributes named the type, the currency and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minBaseRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price MinBaseRent { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Minimaler Kaufpreis; die Attribute geben die Art, die Währung und
        ///                        den Intervall
        ///                        an
        ///                    </para>
        /// <para xml:lang="en">Minimal purchase price; the attributes named the type, the currency
        ///                        and the
        ///                        interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("minPurchasePrice", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price MinPurchasePrice { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED numberOfRoomsFrom benutzen</para>
        /// <para xml:lang="en">DEPRECATED use numberOfRoomsFrom</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("roomAvailableFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double RoomAvailableFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoomAvailableFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RoomAvailableFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RoomAvailableFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED numberOfRoomsFrom benutzen</para>
        /// <para xml:lang="en">DEPRECATED use numberOfRoomsFrom</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> RoomAvailableFrom
        {
            get
            {
                if (this.RoomAvailableFromValueSpecified)
                {
                    return this.RoomAvailableFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RoomAvailableFromValue = value.GetValueOrDefault();
                this.RoomAvailableFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED numberOfRoomsTo benutzen</para>
        /// <para xml:lang="en">DEPRECATED use numberOfRoomsTo</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("roomAvailableTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double RoomAvailableToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoomAvailableTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RoomAvailableTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RoomAvailableToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED numberOfRoomsTo benutzen</para>
        /// <para xml:lang="en">DEPRECATED use numberOfRoomsTo</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> RoomAvailableTo
        {
            get
            {
                if (this.RoomAvailableToValueSpecified)
                {
                    return this.RoomAvailableToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RoomAvailableToValue = value.GetValueOrDefault();
                this.RoomAvailableToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED cookingFacilitiesAvailable benutzen</para>
        /// <para xml:lang="en">DEPRECATED use cookingFacilitiesAvailable</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cookingPossibilty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CookingPossibiltyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CookingPossibilty-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CookingPossibilty property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CookingPossibiltyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED cookingFacilitiesAvailable benutzen</para>
        /// <para xml:lang="en">DEPRECATED use cookingFacilitiesAvailable</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CookingPossibilty
        {
            get
            {
                if (this.CookingPossibiltyValueSpecified)
                {
                    return this.CookingPossibiltyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CookingPossibiltyValue = value.GetValueOrDefault();
                this.CookingPossibiltyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz verfügbar</para>
        /// <para xml:lang="en">Garage/parking available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("parkingAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ParkingAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParkingAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParkingAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ParkingAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garage/ Stellplatz verfügbar</para>
        /// <para xml:lang="en">Garage/parking available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ParkingAvailable
        {
            get
            {
                if (this.ParkingAvailableValueSpecified)
                {
                    return this.ParkingAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ParkingAvailableValue = value.GetValueOrDefault();
                this.ParkingAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gemeinschaftsräume verfügbar</para>
        /// <para xml:lang="en">Common rooms available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("commonRoomsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CommonRoomsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CommonRoomsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CommonRoomsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CommonRoomsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gemeinschaftsräume verfügbar</para>
        /// <para xml:lang="en">Common rooms available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CommonRoomsAvailable
        {
            get
            {
                if (this.CommonRoomsAvailableValueSpecified)
                {
                    return this.CommonRoomsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CommonRoomsAvailableValue = value.GetValueOrDefault();
                this.CommonRoomsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gartenanlage/Park verfügbar</para>
        /// <para xml:lang="en">Garden/park available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("gardenAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GardenAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GardenAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GardenAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GardenAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gartenanlage/Park verfügbar</para>
        /// <para xml:lang="en">Garden/park available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GardenAvailable
        {
            get
            {
                if (this.GardenAvailableValueSpecified)
                {
                    return this.GardenAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GardenAvailableValue = value.GetValueOrDefault();
                this.GardenAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fitnessraum verfügbar</para>
        /// <para xml:lang="en">Fitness room available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("fitnessAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType FitnessAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FitnessAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FitnessAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FitnessAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fitnessraum verfügbar</para>
        /// <para xml:lang="en">Fitness room available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> FitnessAvailable
        {
            get
            {
                if (this.FitnessAvailableValueSpecified)
                {
                    return this.FitnessAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FitnessAvailableValue = value.GetValueOrDefault();
                this.FitnessAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Schwimmbad verfügbar</para>
        /// <para xml:lang="en">pool available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("poolAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType PoolAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PoolAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PoolAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PoolAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Schwimmbad verfügbar</para>
        /// <para xml:lang="en">pool available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> PoolAvailable
        {
            get
            {
                if (this.PoolAvailableValueSpecified)
                {
                    return this.PoolAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PoolAvailableValue = value.GetValueOrDefault();
                this.PoolAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Öffentl. Verkehrsmittel fußläufig erreichbar verfügbar
        ///                    </para>
        /// <para xml:lang="en">Public transportation in walking distance available
        ///                    </para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("publicTransportationAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType PublicTransportationAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PublicTransportationAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PublicTransportationAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PublicTransportationAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Öffentl. Verkehrsmittel fußläufig erreichbar verfügbar
        ///                    </para>
        /// <para xml:lang="en">Public transportation in walking distance available
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> PublicTransportationAvailable
        {
            get
            {
                if (this.PublicTransportationAvailableValueSpecified)
                {
                    return this.PublicTransportationAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PublicTransportationAvailableValue = value.GetValueOrDefault();
                this.PublicTransportationAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ambulanter Pflegedienst verfügbar</para>
        /// <para xml:lang="en">Ambulant nursing service available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ambulantNursingServiceAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType AmbulantNursingServiceAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AmbulantNursingServiceAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AmbulantNursingServiceAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AmbulantNursingServiceAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Ambulanter Pflegedienst verfügbar</para>
        /// <para xml:lang="en">Ambulant nursing service available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> AmbulantNursingServiceAvailable
        {
            get
            {
                if (this.AmbulantNursingServiceAvailableValueSpecified)
                {
                    return this.AmbulantNursingServiceAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AmbulantNursingServiceAvailableValue = value.GetValueOrDefault();
                this.AmbulantNursingServiceAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bewohnernotruf im Zimmer verfügbar</para>
        /// <para xml:lang="en">Emergency call in room available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("emergencyCallInRoomAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EmergencyCallInRoomAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmergencyCallInRoomAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmergencyCallInRoomAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmergencyCallInRoomAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bewohnernotruf im Zimmer verfügbar</para>
        /// <para xml:lang="en">Emergency call in room available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EmergencyCallInRoomAvailable
        {
            get
            {
                if (this.EmergencyCallInRoomAvailableValueSpecified)
                {
                    return this.EmergencyCallInRoomAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmergencyCallInRoomAvailableValue = value.GetValueOrDefault();
                this.EmergencyCallInRoomAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Durchgehend besetzter Empfang</para>
        /// <para xml:lang="en">Reception is manned at all times</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("receptionManned", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ReceptionMannedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReceptionManned-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReceptionManned property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReceptionMannedValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Durchgehend besetzter Empfang</para>
        /// <para xml:lang="en">Reception is manned at all times</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ReceptionManned
        {
            get
            {
                if (this.ReceptionMannedValueSpecified)
                {
                    return this.ReceptionMannedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReceptionMannedValue = value.GetValueOrDefault();
                this.ReceptionMannedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Med. Betreuung vor Ort verfügbar</para>
        /// <para xml:lang="en">Medical assistance on site available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("medicalAssistanceAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType MedicalAssistanceAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MedicalAssistanceAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MedicalAssistanceAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MedicalAssistanceAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Med. Betreuung vor Ort verfügbar</para>
        /// <para xml:lang="en">Medical assistance on site available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> MedicalAssistanceAvailable
        {
            get
            {
                if (this.MedicalAssistanceAvailableValueSpecified)
                {
                    return this.MedicalAssistanceAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MedicalAssistanceAvailableValue = value.GetValueOrDefault();
                this.MedicalAssistanceAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haushaltshilfen verfügbar</para>
        /// <para xml:lang="en">Home help available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("homeHelpAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HomeHelpAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HomeHelpAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HomeHelpAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HomeHelpAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haushaltshilfen verfügbar</para>
        /// <para xml:lang="en">Home help available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HomeHelpAvailable
        {
            get
            {
                if (this.HomeHelpAvailableValueSpecified)
                {
                    return this.HomeHelpAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HomeHelpAvailableValue = value.GetValueOrDefault();
                this.HomeHelpAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Seelsorgerische Betreuung verfügbar</para>
        /// <para xml:lang="en">Counseling available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("counselingAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CounselingAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CounselingAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CounselingAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CounselingAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Seelsorgerische Betreuung verfügbar</para>
        /// <para xml:lang="en">Counseling available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CounselingAvailable
        {
            get
            {
                if (this.CounselingAvailableValueSpecified)
                {
                    return this.CounselingAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CounselingAvailableValue = value.GetValueOrDefault();
                this.CounselingAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohndarlehen verfügbar</para>
        /// <para xml:lang="en">loans available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("loansAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LoansAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LoansAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoansAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LoansAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohndarlehen verfügbar</para>
        /// <para xml:lang="en">loans available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> LoansAvailable
        {
            get
            {
                if (this.LoansAvailableValueSpecified)
                {
                    return this.LoansAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoansAvailableValue = value.GetValueOrDefault();
                this.LoansAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl von</para>
        /// <para xml:lang="de-DE">Anzahl Räume Typ zur Validierung</para>
        /// <para xml:lang="en">count of rooms from</para>
        /// <para xml:lang="en">number of room type for validation</para>
        /// <para xml:lang="en">Total number of digits: 6.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRoomsFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal NumberOfRoomsFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRoomsFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRoomsFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRoomsFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl von</para>
        /// <para xml:lang="de-DE">Anzahl Räume Typ zur Validierung</para>
        /// <para xml:lang="en">count of rooms from</para>
        /// <para xml:lang="en">number of room type for validation</para>
        /// <para xml:lang="en">Total number of digits: 6.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> NumberOfRoomsFrom
        {
            get
            {
                if (this.NumberOfRoomsFromValueSpecified)
                {
                    return this.NumberOfRoomsFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRoomsFromValue = value.GetValueOrDefault();
                this.NumberOfRoomsFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl bis</para>
        /// <para xml:lang="de-DE">Anzahl Räume Typ zur Validierung</para>
        /// <para xml:lang="en">count of rooms to</para>
        /// <para xml:lang="en">number of room type for validation</para>
        /// <para xml:lang="en">Total number of digits: 6.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRoomsTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal NumberOfRoomsToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRoomsTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRoomsTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRoomsToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmeranzahl bis</para>
        /// <para xml:lang="de-DE">Anzahl Räume Typ zur Validierung</para>
        /// <para xml:lang="en">count of rooms to</para>
        /// <para xml:lang="en">number of room type for validation</para>
        /// <para xml:lang="en">Total number of digits: 6.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> NumberOfRoomsTo
        {
            get
            {
                if (this.NumberOfRoomsToValueSpecified)
                {
                    return this.NumberOfRoomsToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRoomsToValue = value.GetValueOrDefault();
                this.NumberOfRoomsToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="AssistedLiving" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="AssistedLiving" /> class.</para>
        /// </summary>
        public AssistedLiving()
        {
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("barrierFree", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BarrierFreeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BarrierFree-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BarrierFree property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BarrierFreeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BarrierFree
        {
            get
            {
                if (this.BarrierFreeValueSpecified)
                {
                    return this.BarrierFreeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BarrierFreeValue = value.GetValueOrDefault();
                this.BarrierFreeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl betreute Wohnungen</para>
        /// <para xml:lang="en">number of apartments that are looked after</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfLookedAfterApartments", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfLookedAfterApartmentsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfLookedAfterApartments-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfLookedAfterApartments property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfLookedAfterApartmentsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl betreute Wohnungen</para>
        /// <para xml:lang="en">number of apartments that are looked after</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfLookedAfterApartments
        {
            get
            {
                if (this.NumberOfLookedAfterApartmentsValueSpecified)
                {
                    return this.NumberOfLookedAfterApartmentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfLookedAfterApartmentsValue = value.GetValueOrDefault();
                this.NumberOfLookedAfterApartmentsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Pflegeplätze</para>
        /// <para xml:lang="en">Number of the nursing places</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfNursingPlaces", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfNursingPlacesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfNursingPlaces-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfNursingPlaces property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfNursingPlacesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Pflegeplätze</para>
        /// <para xml:lang="en">Number of the nursing places</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfNursingPlaces
        {
            get
            {
                if (this.NumberOfNursingPlacesValueSpecified)
                {
                    return this.NumberOfNursingPlacesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfNursingPlacesValue = value.GetValueOrDefault();
                this.NumberOfNursingPlacesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche von</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpaceFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpaceFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpaceFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche von</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpaceFrom
        {
            get
            {
                if (this.LivingSpaceFromValueSpecified)
                {
                    return this.LivingSpaceFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceFromValue = value.GetValueOrDefault();
                this.LivingSpaceFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche bis</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("livingSpaceTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double LivingSpaceToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LivingSpaceTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LivingSpaceTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LivingSpaceToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnfläche bis</para>
        /// <para xml:lang="en">Living space to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> LivingSpaceTo
        {
            get
            {
                if (this.LivingSpaceToValueSpecified)
                {
                    return this.LivingSpaceToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LivingSpaceToValue = value.GetValueOrDefault();
                this.LivingSpaceToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Behindertengerecht</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("handicappedAccessible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType HandicappedAccessibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HandicappedAccessible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HandicappedAccessible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HandicappedAccessibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Behindertengerecht</para>
        /// <para xml:lang="en">handicapped accessible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> HandicappedAccessible
        {
            get
            {
                if (this.HandicappedAccessibleValueSpecified)
                {
                    return this.HandicappedAccessibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HandicappedAccessibleValue = value.GetValueOrDefault();
                this.HandicappedAccessibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeappartments verfügbar</para>
        /// <para xml:lang="en">Guest apartments available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestApartmentsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestApartmentsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestApartmentsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestApartmentsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestApartmentsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeappartments verfügbar</para>
        /// <para xml:lang="en">Guest apartments available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestApartmentsAvailable
        {
            get
            {
                if (this.GuestApartmentsAvailableValueSpecified)
                {
                    return this.GuestApartmentsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestApartmentsAvailableValue = value.GetValueOrDefault();
                this.GuestApartmentsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Restaurant/ Café verfügbar</para>
        /// <para xml:lang="en">Restaurant available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("restaurantAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RestaurantAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RestaurantAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RestaurantAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RestaurantAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Restaurant/ Café verfügbar</para>
        /// <para xml:lang="en">Restaurant available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> RestaurantAvailable
        {
            get
            {
                if (this.RestaurantAvailableValueSpecified)
                {
                    return this.RestaurantAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RestaurantAvailableValue = value.GetValueOrDefault();
                this.RestaurantAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eigene Kochmöglichkeit</para>
        /// <para xml:lang="en">Cooking facilities available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cookingFacilitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CookingFacilitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CookingFacilitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CookingFacilitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CookingFacilitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Eigene Kochmöglichkeit</para>
        /// <para xml:lang="en">Cooking facilities available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CookingFacilitiesAvailable
        {
            get
            {
                if (this.CookingFacilitiesAvailableValueSpecified)
                {
                    return this.CookingFacilitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CookingFacilitiesAvailableValue = value.GetValueOrDefault();
                this.CookingFacilitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mitnahme eigener Möbel möglich</para>
        /// <para xml:lang="en">Own furniture possible</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ownFurniturePossible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType OwnFurniturePossibleValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OwnFurniturePossible-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OwnFurniturePossible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OwnFurniturePossibleValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mitnahme eigener Möbel möglich</para>
        /// <para xml:lang="en">Own furniture possible</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> OwnFurniturePossible
        {
            get
            {
                if (this.OwnFurniturePossibleValueSpecified)
                {
                    return this.OwnFurniturePossibleValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OwnFurniturePossibleValue = value.GetValueOrDefault();
                this.OwnFurniturePossibleValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Reinigungsservice verfügbar</para>
        /// <para xml:lang="en">Cleaning service available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cleaningServiceAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CleaningServiceAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CleaningServiceAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CleaningServiceAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CleaningServiceAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Reinigungsservice verfügbar</para>
        /// <para xml:lang="en">Cleaning service available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CleaningServiceAvailable
        {
            get
            {
                if (this.CleaningServiceAvailableValueSpecified)
                {
                    return this.CleaningServiceAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CleaningServiceAvailableValue = value.GetValueOrDefault();
                this.CleaningServiceAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einkaufsmöglichkeiten im Haus</para>
        /// <para xml:lang="en">Shopping facilities available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("shoppingFacilitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ShoppingFacilitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShoppingFacilitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShoppingFacilitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShoppingFacilitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Einkaufsmöglichkeiten im Haus</para>
        /// <para xml:lang="en">Shopping facilities available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ShoppingFacilitiesAvailable
        {
            get
            {
                if (this.ShoppingFacilitiesAvailableValueSpecified)
                {
                    return this.ShoppingFacilitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ShoppingFacilitiesAvailableValue = value.GetValueOrDefault();
                this.ShoppingFacilitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">24 Stunden Sicherheit</para>
        /// <para xml:lang="en">security 24 hours</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("security24Hours", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType Security24HoursValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Security24Hours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Security24Hours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool Security24HoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">24 Stunden Sicherheit</para>
        /// <para xml:lang="en">security 24 hours</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Security24Hours
        {
            get
            {
                if (this.Security24HoursValueSpecified)
                {
                    return this.Security24HoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.Security24HoursValue = value.GetValueOrDefault();
                this.Security24HoursValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kulturprogramm verfügbar</para>
        /// <para xml:lang="en">cultural program available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("culturalProgramAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CulturalProgramAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CulturalProgramAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CulturalProgramAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CulturalProgramAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kulturprogramm verfügbar</para>
        /// <para xml:lang="en">cultural program available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> CulturalProgramAvailable
        {
            get
            {
                if (this.CulturalProgramAvailableValueSpecified)
                {
                    return this.CulturalProgramAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CulturalProgramAvailableValue = value.GetValueOrDefault();
                this.CulturalProgramAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freizeitaktivitäten verfügbar</para>
        /// <para xml:lang="en">leisureActivitiesAvailable</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("leisureActivitiesAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LeisureActivitiesAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LeisureActivitiesAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LeisureActivitiesAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LeisureActivitiesAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Freizeitaktivitäten verfügbar</para>
        /// <para xml:lang="en">leisureActivitiesAvailable</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> LeisureActivitiesAvailable
        {
            get
            {
                if (this.LeisureActivitiesAvailableValueSpecified)
                {
                    return this.LeisureActivitiesAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LeisureActivitiesAvailableValue = value.GetValueOrDefault();
                this.LeisureActivitiesAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Religiöse Angebote</para>
        /// <para xml:lang="en">Religious offerings available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("religiousOfferingsAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType ReligiousOfferingsAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReligiousOfferingsAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReligiousOfferingsAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ReligiousOfferingsAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Religiöse Angebote</para>
        /// <para xml:lang="en">Religious offerings available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> ReligiousOfferingsAvailable
        {
            get
            {
                if (this.ReligiousOfferingsAvailableValueSpecified)
                {
                    return this.ReligiousOfferingsAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReligiousOfferingsAvailableValue = value.GetValueOrDefault();
                this.ReligiousOfferingsAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balconyAvailable", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BalconyAvailableType BalconyAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BalconyAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BalconyAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmertyp</para>
        /// <para xml:lang="en">Room type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BalconyAvailableType> BalconyAvailable
        {
            get
            {
                if (this.BalconyAvailableValueSpecified)
                {
                    return this.BalconyAvailableValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyAvailableValue = value.GetValueOrDefault();
                this.BalconyAvailableValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _branchEntry = false;
        
        /// <summary>
        /// <para xml:lang="de-DE">Branchenbucheintrag</para>
        /// <para xml:lang="en">listed in yellow pages</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlElementAttribute("branchEntry", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool BranchEntry
        {
            get
            {
                return this._branchEntry;
            }
            set
            {
                this._branchEntry = value;
            }
        }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für WG Zimmer Objekte.</para>
    /// <para xml:lang="en">Elements for the flat share room realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("FlatShareRoom", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlatShareRoom : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Zimmerfläche</para>
        /// <para xml:lang="en">room size</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("roomSize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double RoomSize { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("flooringType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlooringType FlooringTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlooringType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FlooringType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FlooringTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bodenbelag</para>
        /// <para xml:lang="en">flooring type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.FlooringType> FlooringType
        {
            get
            {
                if (this.FlooringTypeValueSpecified)
                {
                    return this.FlooringTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FlooringTypeValue = value.GetValueOrDefault();
                this.FlooringTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Räume</para>
        /// <para xml:lang="en">number of rooms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double NumberOfRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Räume</para>
        /// <para xml:lang="en">number of rooms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> NumberOfRooms
        {
            get
            {
                if (this.NumberOfRoomsValueSpecified)
                {
                    return this.NumberOfRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRoomsValue = value.GetValueOrDefault();
                this.NumberOfRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("apartmentType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ApartmentType ApartmentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApartmentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ApartmentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ApartmentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Wohnungstyp</para>
        /// <para xml:lang="en">apartment type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.ApartmentType> ApartmentType
        {
            get
            {
                if (this.ApartmentTypeValueSpecified)
                {
                    return this.ApartmentTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ApartmentTypeValue = value.GetValueOrDefault();
                this.ApartmentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller verfügbar</para>
        /// <para xml:lang="en">cellar available</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cellar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType CellarValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cellar-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cellar property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CellarValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Keller verfügbar</para>
        /// <para xml:lang="en">cellar available</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Cellar
        {
            get
            {
                if (this.CellarValueSpecified)
                {
                    return this.CellarValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CellarValue = value.GetValueOrDefault();
                this.CellarValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingType HeatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">DEPRECATED benutze heatingTypeEnev2014 Heizungsart </para>
        /// <para xml:lang="en">DEPRECATED use heatingTypeEnev2014 heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingType> HeatingType
        {
            get
            {
                if (this.HeatingTypeValueSpecified)
                {
                    return this.HeatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeValue = value.GetValueOrDefault();
                this.HeatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("barrierFree", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BarrierFreeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BarrierFree-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BarrierFree property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BarrierFreeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Barrierefrei</para>
        /// <para xml:lang="en">barriere free</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BarrierFree
        {
            get
            {
                if (this.BarrierFreeValueSpecified)
                {
                    return this.BarrierFreeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BarrierFreeValue = value.GetValueOrDefault();
                this.BarrierFreeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Provisionselemente</para>
        /// <para xml:lang="en">courtage elements</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("courtage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CourtageInfo Courtage { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="FlatShareRoom" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlatShareRoom" /> class.</para>
        /// </summary>
        public FlatShareRoom()
        {
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaltmiete</para>
        /// <para xml:lang="en">base rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("baseRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double BaseRent { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalRent", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalRentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalRent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalRent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalRentValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Warmmiete</para>
        /// <para xml:lang="en">total rent</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalRent
        {
            get
            {
                if (this.TotalRentValueSpecified)
                {
                    return this.TotalRentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalRentValue = value.GetValueOrDefault();
                this.TotalRentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("serviceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Nebenkosten</para>
        /// <para xml:lang="en">service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ServiceCharge
        {
            get
            {
                if (this.ServiceChargeValueSpecified)
                {
                    return this.ServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ServiceChargeValue = value.GetValueOrDefault();
                this.ServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="de-DE">Kaution</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">deposit</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("deposit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Deposit { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCosts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double HeatingCostsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCosts-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCosts property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungskosten</para>
        /// <para xml:lang="en">heating costs</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> HeatingCosts
        {
            get
            {
                if (this.HeatingCostsValueSpecified)
                {
                    return this.HeatingCostsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsValue = value.GetValueOrDefault();
                this.HeatingCostsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingCostsInServiceCharge", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNoNotApplicableType HeatingCostsInServiceChargeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingCostsInServiceCharge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingCostsInServiceCharge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingCostsInServiceChargeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizkosten in Nebenkosten enthalten</para>
        /// <para xml:lang="en">heating costs in service charge</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNoNotApplicableType> HeatingCostsInServiceCharge
        {
            get
            {
                if (this.HeatingCostsInServiceChargeValueSpecified)
                {
                    return this.HeatingCostsInServiceChargeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingCostsInServiceChargeValue = value.GetValueOrDefault();
                this.HeatingCostsInServiceChargeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar ab</para>
        /// <para xml:lang="en">free from</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("freeFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime FreeFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FreeFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FreeFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FreeFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar ab</para>
        /// <para xml:lang="en">free from</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> FreeFrom
        {
            get
            {
                if (this.FreeFromValueSpecified)
                {
                    return this.FreeFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FreeFromValue = value.GetValueOrDefault();
                this.FreeFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar bis</para>
        /// <para xml:lang="en">free until</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("freeUntil", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime FreeUntilValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FreeUntil-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FreeUntil property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FreeUntilValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Verfügbar bis</para>
        /// <para xml:lang="en">free until</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> FreeUntil
        {
            get
            {
                if (this.FreeUntilValueSpecified)
                {
                    return this.FreeUntilValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FreeUntilValue = value.GetValueOrDefault();
                this.FreeUntilValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mindest Mietdauer in Monaten</para>
        /// <para xml:lang="en">minimum term of lease in months</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("minimumTermOfLease", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int MinimumTermOfLeaseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MinimumTermOfLease-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MinimumTermOfLease property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MinimumTermOfLeaseValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mindest Mietdauer in Monaten</para>
        /// <para xml:lang="en">minimum term of lease in months</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> MinimumTermOfLease
        {
            get
            {
                if (this.MinimumTermOfLeaseValueSpecified)
                {
                    return this.MinimumTermOfLeaseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MinimumTermOfLeaseValue = value.GetValueOrDefault();
                this.MinimumTermOfLeaseValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche</para>
        /// <para xml:lang="en">total space</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalSpace", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double TotalSpaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalSpace-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalSpace property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalSpaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gesamtfläche</para>
        /// <para xml:lang="en">total space</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> TotalSpace
        {
            get
            {
                if (this.TotalSpaceValueSpecified)
                {
                    return this.TotalSpaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalSpaceValue = value.GetValueOrDefault();
                this.TotalSpaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der männlichen Mitbewohner</para>
        /// <para xml:lang="en">number of male flat mates</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfMaleFlatMates", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfMaleFlatMatesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfMaleFlatMates-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfMaleFlatMates property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfMaleFlatMatesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der männlichen Mitbewohner</para>
        /// <para xml:lang="en">number of male flat mates</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfMaleFlatMates
        {
            get
            {
                if (this.NumberOfMaleFlatMatesValueSpecified)
                {
                    return this.NumberOfMaleFlatMatesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfMaleFlatMatesValue = value.GetValueOrDefault();
                this.NumberOfMaleFlatMatesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der weiblichen Mitbewohner</para>
        /// <para xml:lang="en">number of female flat mates</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFemaleFlatMates", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFemaleFlatMatesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFemaleFlatMates-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFemaleFlatMates property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFemaleFlatMatesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl der weiblichen Mitbewohner</para>
        /// <para xml:lang="en">number of female flat mates</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFemaleFlatMates
        {
            get
            {
                if (this.NumberOfFemaleFlatMatesValueSpecified)
                {
                    return this.NumberOfFemaleFlatMatesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFemaleFlatMatesValue = value.GetValueOrDefault();
                this.NumberOfFemaleFlatMatesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter Mitbewohner von</para>
        /// <para xml:lang="en">age of flat mates from</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ageOfFlatMatesFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int AgeOfFlatMatesFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AgeOfFlatMatesFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AgeOfFlatMatesFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AgeOfFlatMatesFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter Mitbewohner von</para>
        /// <para xml:lang="en">age of flat mates from</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> AgeOfFlatMatesFrom
        {
            get
            {
                if (this.AgeOfFlatMatesFromValueSpecified)
                {
                    return this.AgeOfFlatMatesFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AgeOfFlatMatesFromValue = value.GetValueOrDefault();
                this.AgeOfFlatMatesFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter Mitbewohner bis</para>
        /// <para xml:lang="en">age of flat mates to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ageOfFlatMatesTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int AgeOfFlatMatesToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AgeOfFlatMatesTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AgeOfFlatMatesTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AgeOfFlatMatesToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter Mitbewohner bis</para>
        /// <para xml:lang="en">age of flat mates to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> AgeOfFlatMatesTo
        {
            get
            {
                if (this.AgeOfFlatMatesToValueSpecified)
                {
                    return this.AgeOfFlatMatesToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AgeOfFlatMatesToValue = value.GetValueOrDefault();
                this.AgeOfFlatMatesToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter gesuchter Mitbewohner von</para>
        /// <para xml:lang="en">age of requested flat mates from</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ageOfRequestedFrom", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int AgeOfRequestedFromValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AgeOfRequestedFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AgeOfRequestedFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AgeOfRequestedFromValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter gesuchter Mitbewohner von</para>
        /// <para xml:lang="en">age of requested flat mates from</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> AgeOfRequestedFrom
        {
            get
            {
                if (this.AgeOfRequestedFromValueSpecified)
                {
                    return this.AgeOfRequestedFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AgeOfRequestedFromValue = value.GetValueOrDefault();
                this.AgeOfRequestedFromValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter gesuchter Mitbewohner bis</para>
        /// <para xml:lang="en">age of requested flat mates to</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ageOfRequestedTo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int AgeOfRequestedToValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AgeOfRequestedTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AgeOfRequestedTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AgeOfRequestedToValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Alter gesuchter Mitbewohner bis</para>
        /// <para xml:lang="en">age of requested flat mates to</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> AgeOfRequestedTo
        {
            get
            {
                if (this.AgeOfRequestedToValueSpecified)
                {
                    return this.AgeOfRequestedToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AgeOfRequestedToValue = value.GetValueOrDefault();
                this.AgeOfRequestedToValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl gesuchter Mitbewohner</para>
        /// <para xml:lang="en">number of requested flat mates</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfRequestedFlatMates", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfRequestedFlatMatesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfRequestedFlatMates-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfRequestedFlatMates property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfRequestedFlatMatesValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl gesuchter Mitbewohner</para>
        /// <para xml:lang="en">number of requested flat mates</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfRequestedFlatMates
        {
            get
            {
                if (this.NumberOfRequestedFlatMatesValueSpecified)
                {
                    return this.NumberOfRequestedFlatMatesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfRequestedFlatMatesValue = value.GetValueOrDefault();
                this.NumberOfRequestedFlatMatesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage in der sich die WG befindet</para>
        /// <para xml:lang="en">floor the flat share is in</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("floor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int FloorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Floor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Floor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FloorValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Etage in der sich die WG befindet</para>
        /// <para xml:lang="en">floor the flat share is in</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> Floor
        {
            get
            {
                if (this.FloorValueSpecified)
                {
                    return this.FloorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FloorValue = value.GetValueOrDefault();
                this.FloorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Etagen</para>
        /// <para xml:lang="en">number of floors</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFloors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfFloorsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfFloors-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfFloors property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfFloorsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Etagen</para>
        /// <para xml:lang="en">number of floors</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfFloors
        {
            get
            {
                if (this.NumberOfFloorsValueSpecified)
                {
                    return this.NumberOfFloorsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfFloorsValue = value.GetValueOrDefault();
                this.NumberOfFloorsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfBathRooms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int NumberOfBathRoomsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NumberOfBathRooms-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfBathRooms property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfBathRoomsValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Anzahl Badezimmer</para>
        /// <para xml:lang="en">number of bath rooms</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> NumberOfBathRooms
        {
            get
            {
                if (this.NumberOfBathRoomsValueSpecified)
                {
                    return this.NumberOfBathRoomsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfBathRoomsValue = value.GetValueOrDefault();
                this.NumberOfBathRoomsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">balcony</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("balcony", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BalconyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Balcony-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Balcony property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BalconyValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Balkon</para>
        /// <para xml:lang="en">balcony</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Balcony
        {
            get
            {
                if (this.BalconyValueSpecified)
                {
                    return this.BalconyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BalconyValue = value.GetValueOrDefault();
                this.BalconyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">garden</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("garden", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GardenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Garden-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Garden property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GardenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Garten</para>
        /// <para xml:lang="en">garden</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Garden
        {
            get
            {
                if (this.GardenValueSpecified)
                {
                    return this.GardenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GardenValue = value.GetValueOrDefault();
                this.GardenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lift", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType LiftValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lift-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Lift property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LiftValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufzug</para>
        /// <para xml:lang="en">lift</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Lift
        {
            get
            {
                if (this.LiftValueSpecified)
                {
                    return this.LiftValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LiftValue = value.GetValueOrDefault();
                this.LiftValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Backofen</para>
        /// <para xml:lang="en">oven</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("oven", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType OvenValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Oven-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Oven property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OvenValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Backofen</para>
        /// <para xml:lang="en">oven</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Oven
        {
            get
            {
                if (this.OvenValueSpecified)
                {
                    return this.OvenValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OvenValue = value.GetValueOrDefault();
                this.OvenValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kühlschrank</para>
        /// <para xml:lang="en">refrigerator</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("refrigerator", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType RefrigeratorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Refrigerator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Refrigerator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RefrigeratorValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Kühlschrank</para>
        /// <para xml:lang="en">refrigerator</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Refrigerator
        {
            get
            {
                if (this.RefrigeratorValueSpecified)
                {
                    return this.RefrigeratorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RefrigeratorValue = value.GetValueOrDefault();
                this.RefrigeratorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Herd</para>
        /// <para xml:lang="en">stove</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("stove", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType StoveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Stove-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Stove property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool StoveValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Herd</para>
        /// <para xml:lang="en">stove</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Stove
        {
            get
            {
                if (this.StoveValueSpecified)
                {
                    return this.StoveValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StoveValue = value.GetValueOrDefault();
                this.StoveValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Spülmaschine</para>
        /// <para xml:lang="en">dishwasher</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("dishwasher", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType DishwasherValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dishwasher-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dishwasher property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DishwasherValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Spülmaschine</para>
        /// <para xml:lang="en">dishwasher</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> Dishwasher
        {
            get
            {
                if (this.DishwasherValueSpecified)
                {
                    return this.DishwasherValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DishwasherValue = value.GetValueOrDefault();
                this.DishwasherValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Waschmaschine</para>
        /// <para xml:lang="en">washingMachine</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("washingMachine", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType WashingMachineValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WashingMachine-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WashingMachine property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WashingMachineValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Waschmaschine</para>
        /// <para xml:lang="en">washingMachine</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> WashingMachine
        {
            get
            {
                if (this.WashingMachineValueSpecified)
                {
                    return this.WashingMachineValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WashingMachineValue = value.GetValueOrDefault();
                this.WashingMachineValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält ein Klo</para>
        /// <para xml:lang="en">bath has a toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("bathHasWc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BathHasWcValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BathHasWc-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BathHasWc property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BathHasWcValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält ein Klo</para>
        /// <para xml:lang="en">bath has a toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BathHasWc
        {
            get
            {
                if (this.BathHasWcValueSpecified)
                {
                    return this.BathHasWcValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BathHasWcValue = value.GetValueOrDefault();
                this.BathHasWcValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält eine Dusche</para>
        /// <para xml:lang="en">bath has a shower</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("bathHasShower", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BathHasShowerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BathHasShower-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BathHasShower property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BathHasShowerValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält eine Dusche</para>
        /// <para xml:lang="en">bath has a shower</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BathHasShower
        {
            get
            {
                if (this.BathHasShowerValueSpecified)
                {
                    return this.BathHasShowerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BathHasShowerValue = value.GetValueOrDefault();
                this.BathHasShowerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält eine Badewanne</para>
        /// <para xml:lang="en">bath has a tub</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("bathHasTub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType BathHasTubValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BathHasTub-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BathHasTub property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BathHasTubValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Bad enthält eine Badewanne</para>
        /// <para xml:lang="en">bath has a tub</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> BathHasTub
        {
            get
            {
                if (this.BathHasTubValueSpecified)
                {
                    return this.BathHasTubValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BathHasTubValue = value.GetValueOrDefault();
                this.BathHasTubValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeklo</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("guestToilet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType GuestToiletValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GuestToilet-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GuestToilet property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GuestToiletValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Gästeklo</para>
        /// <para xml:lang="en">guest toilet</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> GuestToilet
        {
            get
            {
                if (this.GuestToiletValueSpecified)
                {
                    return this.GuestToiletValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.GuestToiletValue = value.GetValueOrDefault();
                this.GuestToiletValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Haustiere erlaubt</para>
        /// <para xml:lang="en">pets are allowed in the real estate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("petsAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.PetsAllowedType PetsAllowed { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Art des Internetanschlusses</para>
        /// <para xml:lang="en">type of internet connection</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("internetConnection", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.InternetConnectionType InternetConnection { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Rauchen erlaubt</para>
        /// <para xml:lang="en">smoking allowed</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("smokingAllowed", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.SmokingAllowedType SmokingAllowed { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Geschlecht des gesuchten Mitbewohners</para>
        /// <para xml:lang="en">requested gender</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("requestedGender", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.FlatMateGenderType RequestedGender { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Art der Möblierung</para>
        /// <para xml:lang="en">furnishing type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("furnishing", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNoNotApplicableType Furnishing { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Art des Fernsehanschlusses</para>
        /// <para xml:lang="en">tv connection</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tvConnection", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.TvConnectionType TvConnection { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Art des Telefonanschlusses</para>
        /// <para xml:lang="en">telephone connection</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("telephoneConnection", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.TelephoneConnectionType TelephoneConnection { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Parktplatzsituation</para>
        /// <para xml:lang="en">parking situation</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("parkingSituation", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.ParkingSituationType ParkingSituation { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">WG-Größe. 11 bedeuted alle WGs die größer als 10 sind!
        ///                    </para>
        /// <para xml:lang="de-DE">WG-Größe</para>
        /// <para xml:lang="en">flat share size. 11 means all flat share greater then 10!
        ///                    </para>
        /// <para xml:lang="en">flat share size</para>
        /// <para xml:lang="en">Total number of digits: 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// <para xml:lang="en">Maximum inclusive value: 11.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("flatShareSize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int FlatShareSize { get; set; }
    }
    
    /// <summary>
    /// <para xml:lang="de-DE">Eigenschaften für Zwangsversteigerung Objekte.</para>
    /// <para xml:lang="en">Elements for the compulsory auction realestate type.</para>
    /// </summary>
    [System.SerializableAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "0.6.5640.32393")]
    [System.Xml.Serialization.XmlTypeAttribute("CompulsoryAuction", Namespace="http://rest.immobilienscout24.de/schema/search/expose/1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompulsoryAuction : ExposeRealEstate
    {
        
        /// <summary>
        /// <para xml:lang="de-DE">Marktwert der Immobilie, die Attribute geben die Art, die Währung
        ///                        und den Intervall an
        ///                    </para>
        /// <para xml:lang="en">Market value of the real estate, the attributes named the type,
        ///                        the currency and the interval
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("marketValue", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price MarketValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Mindestangebot zur Immobilie, die Attribute geben die Art, die
        ///                        Währung und den Intervall an
        ///                    </para>
        /// <para xml:lang="en">The lowest bid for the real estate, the attributes named the type,
        ///                        the currency and the interval.
        ///                    </para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("lowestBid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.Price LowestBid { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _recurrenceAppointment = false;
        
        /// <summary>
        /// <para xml:lang="de-DE">Wiederholungstermin (Zweiter Termin)</para>
        /// <para xml:lang="en">Second date for the auction</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlElementAttribute("recurrenceAppointment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RecurrenceAppointment
        {
            get
            {
                return this._recurrenceAppointment;
            }
            set
            {
                this._recurrenceAppointment = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der Auktion</para>
        /// <para xml:lang="en">date of auction</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dateOfAuction", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime DateOfAuction { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Änderung</para>
        /// <para xml:lang="en">last cahnge date</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("lastChangeDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime LastChangeDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastChangeDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastChangeDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LastChangeDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Datum der letzten Änderung</para>
        /// <para xml:lang="en">last cahnge date</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LastChangeDate
        {
            get
            {
                if (this.LastChangeDateValueSpecified)
                {
                    return this.LastChangeDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LastChangeDateValue = value.GetValueOrDefault();
                this.LastChangeDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufhebungsdatum</para>
        /// <para xml:lang="en">date of cancellation</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("cancellationDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime CancellationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CancellationDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CancellationDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CancellationDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Aufhebungsdatum</para>
        /// <para xml:lang="en">date of cancellation</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> CancellationDate
        {
            get
            {
                if (this.CancellationDateValueSpecified)
                {
                    return this.CancellationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CancellationDateValue = value.GetValueOrDefault();
                this.CancellationDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erfassungsdatum</para>
        /// <para xml:lang="en">date of recordation</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("recordationDate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="date")]
        public System.DateTime RecordationDateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RecordationDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RecordationDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RecordationDateValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Erfassungsdatum</para>
        /// <para xml:lang="en">date of recordation</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> RecordationDate
        {
            get
            {
                if (this.RecordationDateValueSpecified)
                {
                    return this.RecordationDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RecordationDateValue = value.GetValueOrDefault();
                this.RecordationDateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Fläche, unterschiedlich je nach Typ</para>
        /// <para xml:lang="en">area, different per type</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("area", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double Area { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Objektart der Auktion</para>
        /// <para xml:lang="en">object type of the auction</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("auctionObjectType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CompulsoryAuctionType AuctionObjectType { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Das Amtsgericht das für die Auktion verantwortlich ist
        ///                    </para>
        /// <para xml:lang="en">the county court responsible for the auction</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("countyCourt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.CountyCourt CountyCourt { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Das Aktenzeichen beim Amtsgericht</para>
        /// <para xml:lang="en">the file reference at the county court</para>
        /// <para xml:lang="en">Maximum length: 18.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(18)]
        [System.Xml.Serialization.XmlElementAttribute("fileReferenceAtCountyCourt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FileReferenceAtCountyCourt { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Grundbuchsblatt-Nummer</para>
        /// <para xml:lang="en">number of folio</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(40)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfFolio", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NumberOfFolio { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _splittingAuction = false;
        
        /// <summary>
        /// <para xml:lang="de-DE">Teilungsversteigerung</para>
        /// <para xml:lang="en">splitting auction</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.Xml.Serialization.XmlElementAttribute("splittingAuction", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool SplittingAuction
        {
            get
            {
                return this._splittingAuction;
            }
            set
            {
                this._splittingAuction = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Besitzer des zu versteigernden Objekts</para>
        /// <para xml:lang="en">Owner of the object to be auctioned</para>
        /// <para xml:lang="en">Maximum length: 80.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(80)]
        [System.Xml.Serialization.XmlElementAttribute("owner", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Owner { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweis</para>
        /// <para xml:lang="en">energy performance certificate</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("energyCertificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.EnergyPerformanceCertificate EnergyCertificate { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("heatingTypeEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.HeatingTypeEnev2014 HeatingTypeEnev2014Value { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeatingTypeEnev2014-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeatingTypeEnev2014 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeatingTypeEnev2014ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Heizungsart</para>
        /// <para xml:lang="en">heating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.HeatingTypeEnev2014> HeatingTypeEnev2014
        {
            get
            {
                if (this.HeatingTypeEnev2014ValueSpecified)
                {
                    return this.HeatingTypeEnev2014Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeatingTypeEnev2014Value = value.GetValueOrDefault();
                this.HeatingTypeEnev2014ValueSpecified = value.HasValue;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> _energySourcesEnev2014;
        
        /// <summary>
        /// <para xml:lang="de-DE">wesentliche Energieträger</para>
        /// <para xml:lang="en">energy sources</para>
        /// </summary>
        [System.Xml.Serialization.XmlArrayAttribute("energySourcesEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("energySourceEnev2014", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014> EnergySourcesEnev2014
        {
            get
            {
                return this._energySourcesEnev2014;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergySourcesEnev2014-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EnergySourcesEnev2014 collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnergySourcesEnev2014Specified
        {
            get
            {
                return (this.EnergySourcesEnev2014.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="CompulsoryAuction" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CompulsoryAuction" /> class.</para>
        /// </summary>
        public CompulsoryAuction()
        {
            this._energySourcesEnev2014 = new System.Collections.ObjectModel.Collection<IS24RestApi.Common.EnergySourceEnev2014>();
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("buildingEnergyRatingType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.BuildingEnergyRatingType BuildingEnergyRatingTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BuildingEnergyRatingType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BuildingEnergyRatingType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool BuildingEnergyRatingTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieausweistyp</para>
        /// <para xml:lang="en">building energy rating type</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.BuildingEnergyRatingType> BuildingEnergyRatingType
        {
            get
            {
                if (this.BuildingEnergyRatingTypeValueSpecified)
                {
                    return this.BuildingEnergyRatingTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.BuildingEnergyRatingTypeValue = value.GetValueOrDefault();
                this.BuildingEnergyRatingTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("thermalCharacteristic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="double")]
        public double ThermalCharacteristicValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThermalCharacteristic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ThermalCharacteristic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ThermalCharacteristicValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauchskennwert</para>
        /// <para xml:lang="en">thermal characteristic</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1999.99.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<double> ThermalCharacteristic
        {
            get
            {
                if (this.ThermalCharacteristicValueSpecified)
                {
                    return this.ThermalCharacteristicValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ThermalCharacteristicValue = value.GetValueOrDefault();
                this.ThermalCharacteristicValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("energyConsumptionContainsWarmWater", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public IS24RestApi.Common.YesNotApplicableType EnergyConsumptionContainsWarmWaterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EnergyConsumptionContainsWarmWater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EnergyConsumptionContainsWarmWater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EnergyConsumptionContainsWarmWaterValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Energieverbrauch für Warmwasser enthalten</para>
        /// <para xml:lang="en">energy consumption contains warm water</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<IS24RestApi.Common.YesNotApplicableType> EnergyConsumptionContainsWarmWater
        {
            get
            {
                if (this.EnergyConsumptionContainsWarmWaterValueSpecified)
                {
                    return this.EnergyConsumptionContainsWarmWaterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EnergyConsumptionContainsWarmWaterValue = value.GetValueOrDefault();
                this.EnergyConsumptionContainsWarmWaterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYear", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="int")]
        public int ConstructionYearValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYear-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYear property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr</para>
        /// <para xml:lang="en">construction year</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> ConstructionYear
        {
            get
            {
                if (this.ConstructionYearValueSpecified)
                {
                    return this.ConstructionYearValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearValue = value.GetValueOrDefault();
                this.ConstructionYearValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("constructionYearUnknown", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ConstructionYearUnknownValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConstructionYearUnknown-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructionYearUnknown property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ConstructionYearUnknownValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="de-DE">Baujahr ist unbekannt</para>
        /// <para xml:lang="en">construction year unknown: true value only expected, instead of false set construction year</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> ConstructionYearUnknown
        {
            get
            {
                if (this.ConstructionYearUnknownValueSpecified)
                {
                    return this.ConstructionYearUnknownValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ConstructionYearUnknownValue = value.GetValueOrDefault();
                this.ConstructionYearUnknownValueSpecified = value.HasValue;
            }
        }
    }
}
